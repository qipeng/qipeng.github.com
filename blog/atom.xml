<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>
        BASIC blog full text feed    </title>
        <link href="blog/atom.xml" rel="self" />
    
        <link href="/"/>
    
        
    <updated>2012-10-22T09:19:59Z</updated>

    <id>/blog/atom.xml/</id>

            <entry>
            <title type="html">Hello, World!</title>
            <author><name>Peng Qi</name></author>
            <link href="/blog/hello-world.html"/>
            <updated>2012-03-29T14:24:00Z</updated>
            <published>2012-03-29T14:24:00Z</published>
            <id>/blog/hello-world.html</id>
                        <category   scheme="/blog/tags"
                        term="hello_world"
                        label="Hello_World" />
            
            <content type="html">
                                &lt;p&gt;
Seems that the first post of every programmer&amp;#8217;s blog is &amp;#8220;hello, world&amp;#8221; 
&amp;#8212; I&amp;#8217;m just following the fashion here. Thanks to &lt;a href=&#39;//www.github.com&#39;&gt;
GitHub&lt;/a&gt; and &lt;a href=&#39;//hyde.github.com&#39;&gt;hyde&lt;/a&gt;, I now have this awesome
multi-page static homepage with a personal blog in&amp;nbsp;it.&lt;/p&gt;

&lt;p&gt;
What will be in this blog are some tech notes from my project experiences,
and some experience/summary of my research. Maybe sometimes something personal,
too. Thanks to GitHub, now even uploading source code and stuff is possible,&amp;nbsp;too!
&lt;/p&gt;            </content>
        </entry>
            <entry>
            <title type="html">Tutorial 1&#58; The Fancy Corner</title>
            <author><name>Peng Qi</name></author>
            <link href="/blog/tutorial-1.html"/>
            <updated>2012-03-31T18:00:00Z</updated>
            <published>2012-03-31T18:00:00Z</published>
            <id>/blog/tutorial-1.html</id>
                        <category   scheme="/blog/tags"
                        term="tutorial"
                        label="Tutorial" />
                        <category   scheme="/blog/tags"
                        term="html_css"
                        label="Html_Css" />
            
            <content type="html">
                                &lt;p&gt;&lt;link rel=&#34;stylesheet&#34; href=&#34;/media/css/syntaxhighlighter/shCoreEclipse.css&#34; type=&#34;text/css&#34;&gt;
&lt;link rel=&#34;stylesheet&#34; href=&#34;/media/css/syntaxhighlighter/shThemeEclipse.css&#34; type=&#34;text/css&#34;&gt;&lt;/p&gt;
&lt;script type=&#34;text/javascript&#34; src=&#34;/media/js/syntaxhighlighter/shCore.js&#34;&gt;&lt;/script&gt;

&lt;script type=&#34;text/javascript&#34; src=&#34;/media/js/syntaxhighlighter/shBrushJScript.js&#34;&gt;&lt;/script&gt;

&lt;script type=&#34;text/javascript&#34; src=&#34;/media/js/syntaxhighlighter/shBrushCss.js&#34;&gt;&lt;/script&gt;

&lt;script type=&#34;text/javascript&#34; src=&#34;/media/js/syntaxhighlighter/shBrushXml.js&#34;&gt;&lt;/script&gt;

&lt;script type=&#34;text/javascript&#34;&gt;SyntaxHighlighter.all()&lt;/script&gt;

&lt;p&gt;
The &amp;#8220;&lt;img src=&#34;/media/images/fancycorner.png&#34;&gt;&amp;#8220;, or as I call it &amp;#8212; the &amp;#8220;fancy corner&amp;#8221;,
is a special mark used on this site to mark out images that can be viewed in a larger
version with a pop-up window. This blog will explain how this functionality is made possible
with &lt;a href=&#34;http://fancybox.net/&#34; target=&#34;_blank&#34;&gt;FancyBox&lt;/a&gt; and 
&lt;a href=&#34;http://jquery.com/&#34; target=&#34;_blank&#34;&gt;jQuery&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;
Before starting the &amp;#8220;tutorial&amp;#8221;, I&amp;#8217;d like to thank &lt;a href=&#34;http://qiankanglai.github.com&#34; target=&#34;_blank&#34;&gt;
Kanglai Qian&lt;/a&gt; who is a brilliant programmer and as well my good friend, for sharing thoughts
and awesome plugins when I was developing this template. Many hyde problems will be much more 
painstaking without his help and his hyde source code. We&amp;#8217;ve also collaborated in a number of 
projects, which can be found at&amp;nbsp;GitHub.
&lt;/p&gt;

&lt;p&gt;
Besides, I&amp;#8217;d like to take time to explain the word &amp;#8220;tutorial&amp;#8221;. In fact, what I mean by tutorial is 
more of some summary, where I summarize the problems I encountered and tricks I used to solve them. 
I&amp;#8217;d like to share with you all the tricks that I used, and all possible modifications of this template 
to &lt;a href=&#34;/misc/homepage.html&#34;&gt;make it yours&lt;/a&gt;, especially for people who are not that familiar 
with &lt;span class=&#34;caps&#34;&gt;HTML&lt;/span&gt;/&lt;span class=&#34;caps&#34;&gt;CSS&lt;/span&gt; and hyde/&lt;a href=&#34;https://www.djangoproject.com/&#34; target=&#34;_blank&#34;&gt;Django&lt;/a&gt;/Python like&amp;nbsp;myself.
&lt;/p&gt;

&lt;p&gt;
Let&amp;#8217;s get to business. The problem of fancy corner is actually threefold: (a) how to get FancyBox to work,
(b) how to attach the fancy corner (or any other indicators you like) on an image equipped with FancyBox, 
and (c) how to do this easily for all images without changing the &lt;span class=&#34;caps&#34;&gt;HTML&lt;/span&gt; source code. For the first problem,
the best suggestion I can offer is visiting &lt;a href=&#34;http://fancybox.net/&#34; target=&#34;_blank&#34;&gt;FancyBox&amp;#8217;s 
official site&lt;/a&gt; and find out yourself. Hence, let&amp;#8217;s skip this problem and focus on the remaining&amp;nbsp;two.
&lt;/p&gt;

&lt;p&gt;
Formally speaking, attaching the fancy corner to the image is a problem where we seek to locate the fancy corner
image at exactly the top right corner of the given image. After a wild search on the Internet, I found out a 
solution for similar problems: locate the close button image for a pop-up window layer. The solution is 
astonishingly simple, in fact:
&lt;pre class=&#34;brush: css&#34;&gt;
#outer {
    position:relative;
}
#inner {
    position:absolute;
    right:10px;
    top:10px;
}
&lt;/pre&gt;
&lt;pre class=&#34;brush: html&#34;&gt;
&amp;lt;div id=&#34;outer&#34;&amp;gt;
    say something about your pop-up window.
    &amp;lt;div id=&#34;inner&#34;&amp;gt;
        put your closing button here
    &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/pre&gt;
As long as the parent position is relative and the child position is absolute, the &amp;#8220;left right top bottom&amp;#8221;
attributes of the child element is relative to the borders of the parent&amp;nbsp;element. 
&lt;/p&gt;

&lt;p&gt;
So is that it? We add an inner &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; inside the &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; tag of FancyBox after the &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt;, set &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt;&amp;#8216;s
position to relative and our &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;&amp;#8216;s position to absolute, arrange top and right to 0, and now we have
a beautiful fancy corner? Yes, and no. Yes, now you have the appearance where the image has a fancy corner on 
the top right corner&amp;#8230; But it&amp;#8217;s probably not the top right corner of the image exactly. You&amp;#8217;ll have to remove the 
&lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; tag from the document flow to automatically adjust its width for the fancy corner to locate properly.
Adding &amp;#8220;float:left&amp;#8221; will do that. However, this will cause damage to the overall format.
 Thus, an encompassing &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; would be needed to put it back into the document flow, with the style&amp;nbsp;&amp;#8220;overflow:hidden&amp;#8221;.
&lt;/p&gt;

&lt;p&gt;
What&amp;#8217;s left is: we need to automatically add this &amp;#8220;style&amp;#8221; to all FancyBox images. Thanks to jQuery, which has
powerful &lt;span class=&#34;caps&#34;&gt;DOM&lt;/span&gt; selector and &lt;span class=&#34;caps&#34;&gt;DOM&lt;/span&gt; manipulation functions, this task is just a piece of cake. I&amp;#8217;ll not be able to 
explain all about jQuery, so it&amp;#8217;s better if you just &lt;a href=&#34;http://jquery.com/&#34; target=&#34;_blank&#34;&gt;visit its site&lt;/a&gt;.
Here&amp;#8217;s my implementation in &amp;#8220;site.css&amp;#8221; and &amp;#8220;main.js&amp;#8221;:
&lt;pre class=&#34;brush:css&#34;&gt;
.fancyimg {
    position:relative;
    margin:0px 10px;
    width:auto;
    overflow:hidden;
    float:left;
}
&lt;/pre&gt;
&lt;pre class=&#34;brush: js&#34;&gt;
function loadimg(){
    // FancyBox set-up
    $(&#34;a.fancyimg&#34;).fancybox({
        &#39;width&#39;: &#39;75%&#39;,
        &#39;height&#39;: &#39;75%&#39;,
        &#39;overlayShow&#39;: false,
        &#39;transitionIn&#39;: &#39;fade&#39;,
        &#39;transitionOut&#39;: &#39;fade&#39;,
        &#39;titlePosition&#39;: &#39;inside&#39;,
        &#39;overlayColor&#39;: &#39;#000&#39;,
        &#39;overlayOpacity&#39;: 0.9});

    // Attach fancy corner
    // I attached my fancy corner as a &amp;lt;div&amp;gt; tag.
    $(&#34;a.fancyimg img&#34;).after(&#39;&amp;lt;div style=&#34;display:block;width:16px;height:16px;
    position:absolute;  
    top:0px;            
    right:0px;
    background:url(\&#39;/media/images/fancycorner.png\&#39;) no-repeat;
    _background:none;
    _filter:progid:DXImageTransform.Microsoft.AlphaImageLoader(enabled=true, sizingMethod=noscale, src=\&#39;/media/images/fancycorner.png\&#39;);&#34;&amp;gt; &amp;lt;/div&amp;gt;&#39;);

    // Wrap the outter &amp;lt;div&amp;gt;
    $(&#34;a.fancyimg&#34;).wrap(&#34;&amp;lt;div style=&#39;overflow:hidden;&#39; /&amp;gt;&#34;);
}
&lt;/pre&gt;
&lt;/p&gt;

&lt;p&gt;
Enjoy!
&lt;/p&gt;            </content>
        </entry>
            <entry>
            <title type="html">Compiling QSlim 2.1 under Windows / Visual Studio</title>
            <author><name>Peng Qi</name></author>
            <link href="/blog/compiling-qslim-21.html"/>
            <updated>2012-04-03T12:30:00Z</updated>
            <published>2012-04-03T12:30:00Z</published>
            <id>/blog/compiling-qslim-21.html</id>
                        <category   scheme="/blog/tags"
                        term="qslim"
                        label="Qslim" />
                        <category   scheme="/blog/tags"
                        term="compile"
                        label="Compile" />
                        <category   scheme="/blog/tags"
                        term="windows"
                        label="Windows" />
                        <category   scheme="/blog/tags"
                        term="visual_studio"
                        label="Visual_Studio" />
            
            <content type="html">
                                &lt;p&gt;&lt;link rel=&#34;stylesheet&#34; href=&#34;/media/css/syntaxhighlighter/shCoreEclipse.css&#34; type=&#34;text/css&#34;&gt;
&lt;link rel=&#34;stylesheet&#34; href=&#34;/media/css/syntaxhighlighter/shThemeEclipse.css&#34; type=&#34;text/css&#34;&gt;&lt;/p&gt;
&lt;script type=&#34;text/javascript&#34; src=&#34;/media/js/syntaxhighlighter/shCore.js&#34;&gt;&lt;/script&gt;

&lt;script type=&#34;text/javascript&#34; src=&#34;/media/js/syntaxhighlighter/shBrushCpp.js&#34;&gt;&lt;/script&gt;

&lt;script type=&#34;text/javascript&#34;&gt;SyntaxHighlighter.all()&lt;/script&gt;

&lt;p&gt;&lt;span style=&#34;color:red&#34;&gt;Last Updated: Jun 8, 2012, broken links to &amp;#8220;Related Resources&amp;#8221; are now fixed.
 Thanks to Jens Mertelmeyer, this problem is found and fixed in time. Thank&amp;nbsp;you.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span style=&#34;color:green&#34;&gt;If this page helped you in any online or printed publication, please
don&amp;#8217;t forget to mention it, and help me spread it to more people in need. Thank you very&amp;nbsp;much.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;
&lt;a href=&#34;http://mgarland.org/software/qslim21.html&#34; target=&#34;_blank&#34;&gt;QSlim&lt;/a&gt; is a 
light-weight software developed by &lt;a href=&#34;http://mgarland.org&#34; target=&#34;_blank&#34;&gt;M. Garland&lt;/a&gt;, 
which can simplify mesh models swiftly, maximally preserving their geodesic properties. 
It is very important for model retrieval and other applications that require small data scale 
as well as relatively accurate geodesic properties to overcome the difficulties of 
non-rigid&amp;nbsp;transform.&lt;/p&gt;

&lt;p&gt;
Lately I&amp;#8217;ve been working on my undergraduate thesis, which, must use the QSlim software. However, 
I found a problem (which I may probably write a blog about later)
 with the &lt;span class=&#34;caps&#34;&gt;DLL&lt;/span&gt; version as well as the author&amp;#8217;s compilation of 
&lt;a href=&#34;http://mgarland.org/software/qslim20.html&#34; target=&#34;_blank&#34;&gt;QSlim 2.0&lt;/a&gt;, so I 
decided to download the source for QSlim 2.1 and compile it on my own computer. After failed by 
Cygwin, I turned to the native Visual Studio on my Windows&amp;nbsp;Machine.
&lt;/p&gt;

&lt;p&gt;
For related resources (compiled &lt;span class=&#34;caps&#34;&gt;EXE&lt;/span&gt; file, &lt;span class=&#34;caps&#34;&gt;VS2010&lt;/span&gt; solution and configured libraries), 
please skip to &lt;a href=&#34;#resources&#34;&gt;Related Resources&lt;/a&gt;.
&lt;/p&gt;

&lt;div class=&#34;title&#34;&gt;&lt;h2&gt;Environment&lt;/h2&gt;&lt;/div&gt;

&lt;table&gt;
&lt;tr&gt;&lt;td class=&#34;lighter&#34;&gt;&lt;span class=&#34;caps&#34;&gt;CPU&lt;/span&gt; Architecture&lt;/td&gt;&lt;td&gt;x86&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class=&#34;lighter&#34;&gt;Operating System&lt;/td&gt;&lt;td&gt;Windows 7 Ultimate &lt;span class=&#34;caps&#34;&gt;SP1&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class=&#34;lighter&#34;&gt;Visual Studio&lt;/td&gt;&lt;td&gt;2010 Pro&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;

&lt;p&gt;
Source code is directly downloaded from Garland&amp;#8217;s page. If you are using other systems
or &lt;span class=&#34;caps&#34;&gt;IDE&lt;/span&gt;&amp;#8217;s, you may also find the libs required by QSlim in this article&amp;nbsp;useful.&lt;/p&gt;

&lt;p&gt;Luckily enough, the author maintained a 
&lt;span class=&#34;caps&#34;&gt;VC&lt;/span&gt; 6 workspace file(.dsw): &amp;#8220;qslim-2.1/win32/SlimKit.dsw&amp;#8221;. Open it and Visual Studio will
automatically convert the version for you if you are using &lt;span class=&#34;caps&#34;&gt;VS&lt;/span&gt; 2005 or above. The author
has already included plentiful resource in each project&amp;#8217;s &amp;#8220;External&amp;nbsp;Dependencies&amp;#8221;.
&lt;/p&gt;

&lt;p&gt;So is that enough? Can we proceed and build the project QSlim easily and happily? 
Sadly, no. It envolves many referred libraries and cross-platform issues, which I will 
analyze below. Due to the solution&amp;#8217;s build order: MixKit libgfx QSlim QVis SMFView, I&amp;#8217;ll 
introduce in order how I compiled MixKit, libgfx, and QSlim in order below. As for the 
two projects that&amp;#8217;s left, I&amp;#8217;m sure you&amp;#8217;ll be able to compile them with the tricks in 
this&amp;nbsp;article.
&lt;/p&gt;

&lt;div class=&#34;title&#34;&gt;&lt;h2&gt;1.&amp;nbsp;MixKit&lt;/h2&gt;&lt;/div&gt;

&lt;div class=&#34;title&#34;&gt;&lt;a name=&#34;1.1&#34;&gt;&lt;/a&gt;&lt;h3&gt;1.1&lt;/h3&gt;&lt;/div&gt;

&lt;p&gt;
Try building the project directly and you will receive this compiler error. 
(In all error info below I&amp;#8217;ll hide my local path of QSlim as&amp;nbsp;&amp;#8220;qslim-2.1&amp;#34;)
&lt;/p&gt;

&lt;div class=&#34;codebox&#34;&gt;
1&amp;gt;  MxStdGUI.cxx &lt;br&gt;
1&amp;gt;qslim-2.1\libgfx\include\gfx/gui.h(22): fatal error C1083: Cannot open include file: &amp;#8216;&lt;span class=&#34;caps&#34;&gt;FL&lt;/span&gt;/Fl.H&amp;#8217;: No such file or directory
&lt;/div&gt;

&lt;p&gt;
This problem is relatively easy. Download the required library &lt;a href=&#34;http://www.fltk.org/&#34; target=&#34;_blank&#34;&gt;fltk&lt;/a&gt;
and unzip it somewhere (I used fltk 1.3.0 and unzipped it to &amp;#8220;qslim-2.1\tools&amp;#34;).
Then right click on the MixKit project, select &amp;#8220;Properties&amp;#8221;, choose from the left list 
&amp;#8220;Configuration Properties &amp;gt; &lt;span class=&#34;caps&#34;&gt;VC&lt;/span&gt;++ Directories&amp;#8221;. Add to &amp;#8220;Include Directories&amp;#8221;: &amp;#8220;..&amp;#92;tools\fltk-1.3.0;&amp;#8221; (without the 
quotation marks but &lt;span class=&#34;caps&#34;&gt;WITH&lt;/span&gt; the semicolon. If you are adding this path to the end of the original string, make sure
you put a semicolon before this&amp;nbsp;path).
&lt;/p&gt;

&lt;p&gt;
What you just did tells the compiler where to find the missing header files. If you would like to add this library
for all programs, then you&amp;#8217;ll have to unzip it into your Visual Studio include path. Google for it as I won&amp;#8217;t 
elaborate that&amp;nbsp;here.
&lt;/p&gt;

&lt;p class=&#34;news&#34;&gt;&lt;span class=&#34;lighter&#34;&gt;&lt;span class=&#34;caps&#34;&gt;NOTE&lt;/span&gt;&lt;/span&gt;&lt;br&gt;
 &lt;ol class=&#34;news&#34;&gt;
 &lt;li&gt;You should remember this &amp;#8220;adding to include path&amp;#8221; operation as it&amp;#8217;s very
 useful in the rest part of this article as well as your future work with Visual Studio&amp;nbsp;C++&lt;/li&gt;
 &lt;li&gt;This relative path is relative to the directory where your project (.vcxproj) file is stored, *&lt;span class=&#34;caps&#34;&gt;NOT&lt;/span&gt;* the source file, *&lt;span class=&#34;caps&#34;&gt;NOR&lt;/span&gt;* the header&amp;nbsp;file.&lt;/li&gt;
 &lt;li&gt;In all configurations I use relative paths so that the solution is compilable 
 even the directory&amp;#8217;s been changed. You may use absolute ones if you&amp;nbsp;want.&lt;/li&gt;
 &lt;/ol&gt;
 &lt;/p&gt;

&lt;div class=&#34;title&#34;&gt;&lt;h3&gt;1.2&lt;/h3&gt;&lt;/div&gt;

&lt;p&gt;However, new problems&amp;nbsp;comes.&lt;/p&gt;

&lt;div class=&#34;codebox&#34;&gt;
1&amp;gt;  getopt.c&lt;br&gt;
1&amp;gt;c1 : fatal error C1083: Cannot open source file: &amp;#8216;src\getopt.c&amp;#8217;: No such file or directory&lt;br&gt;
1&amp;gt;  getopt1.c&lt;br&gt;
1&amp;gt;c1 : fatal error C1083: Cannot open source file: &amp;#8216;src\getopt1.c&amp;#8217;: No such file or directory
&lt;/div&gt;

&lt;p&gt;
This is caused by a directory in the project &amp;#8212; &amp;#8220;&lt;span class=&#34;caps&#34;&gt;GNU&lt;/span&gt; getopt&amp;#8221;. &lt;code&gt;getopt&lt;/code&gt; is a useful
command-line &lt;span class=&#34;caps&#34;&gt;API&lt;/span&gt; in Unix-like operating systems, however it&amp;#8217;s not supported 
by Windows/Visual Studio. Luckily, this directory seems not required by this library actually,
so removing it will do the&amp;nbsp;trick.
&lt;/p&gt;

&lt;p&gt;
Now you have the MixKit library successfully&amp;nbsp;compiled.
&lt;/p&gt;

&lt;div class=&#34;title&#34;&gt;&lt;h2&gt;2.&amp;nbsp;libgfx&lt;/h2&gt;&lt;/div&gt;

&lt;div class=&#34;title&#34;&gt;&lt;h3&gt;2.1&lt;/h3&gt;&lt;/div&gt;

&lt;p&gt;The libgfx project compiles with a lot of warning messages and the following errors (I selected 
only the compiler information that&amp;#8217;s related to&amp;nbsp;errors):&lt;/p&gt;

&lt;div class=&#34;codebox&#34;&gt;
1&amp;gt;  arcball.cxx&lt;br&gt;
1&amp;gt;..&amp;#92;..&amp;#92;src\arcball.cxx(182): error C2678: binary &amp;#8216;&amp;gt;&amp;gt;&amp;#8217; : no operator found which takes a left-hand operand of type &amp;#8216;std::istream&amp;#8217; (or there is no acceptable conversion)&lt;br&gt;
1&amp;gt;  baseball.cxx&lt;br&gt;
1&amp;gt;..&amp;#92;..&amp;#92;src\baseball.cxx(53): error C2678: binary &amp;#8216;&amp;gt;&amp;gt;&amp;#8217; : no operator found which takes a left-hand operand of type &amp;#8216;std::istream&amp;#8217; (or there is no acceptable conversion)
&lt;/div&gt;

&lt;p&gt;
This is due to a std library problem. Simply add to qslim-2.1/libgfx/include/gfx/gl.h: 
&lt;code&gt;#include &amp;lt;string&amp;gt;&lt;/code&gt; will save a lot of .cxx files that are including this&amp;nbsp;header.
&lt;/p&gt;

&lt;p&gt;
Visual Studio also provides an easier approach to finding this file: double click the 
error message and you&amp;#8217;ll open &amp;#8220;arcball.cxx&amp;#8221;; then right click on &lt;code&gt;#include &amp;lt;gfx/gl.h&amp;gt;&lt;/code&gt;
, select &amp;#8220;Open Document &amp;lt;gfx/gl.h&amp;gt;&amp;nbsp;Ctrl+Shift+G&amp;#8221;.
&lt;/p&gt;

&lt;div class=&#34;title&#34;&gt;&lt;h3&gt;2.2&lt;/h3&gt;&lt;/div&gt;

&lt;p&gt;The next error is&amp;nbsp;familiar:&lt;/p&gt;

&lt;div class=&#34;codebox&#34;&gt;
1&amp;gt;  gui.cxx&lt;br&gt;
1&amp;gt;qslim-2.1\libgfx\include\gfx/gui.h(22): fatal error C1083: Cannot open include file: &amp;#8216;&lt;span class=&#34;caps&#34;&gt;FL&lt;/span&gt;/Fl.H&amp;#8217;: No such file or directory
&lt;/div&gt;

&lt;p&gt;
Remember &lt;a href=&#34;#1.1&#34;&gt;1.1&lt;/a&gt;? Now you&amp;#8217;ll have to add to the include paths of &amp;#8220;libgfx&amp;#8221;: &amp;#8220;..&amp;#92;..&amp;#92;..&amp;#92;tools\fltk-1.3.0;&amp;#8221;.
Note again that this path is relative to your project&amp;nbsp;file.
&lt;/p&gt;

&lt;div class=&#34;title&#34;&gt;&lt;h3&gt;2.3&lt;/h3&gt;&lt;/div&gt;

&lt;p&gt;Here comes an annoying&amp;nbsp;part:&lt;/p&gt;

&lt;div class=&#34;codebox&#34;&gt;
1&amp;gt;  raster-jpeg.cxx&lt;br&gt;
1&amp;gt;..&amp;#92;..&amp;#92;src\raster-jpeg.cxx(22): fatal error C1083: Cannot open include file: &amp;#8216;jpeglib.h&amp;#8217;: No such file or directory&lt;br&gt;
1&amp;gt;  raster-png.cxx&lt;br&gt;
1&amp;gt;..&amp;#92;..&amp;#92;src\raster-png.cxx(18): fatal error C1083: Cannot open include file: &amp;#8216;png.h&amp;#8217;: No such file or directory&lt;br&gt;
1&amp;gt;  raster-tiff.cxx&lt;br&gt;
1&amp;gt;..&amp;#92;..&amp;#92;src\raster-tiff.cxx(14): fatal error C1083: Cannot open include file: &amp;#8216;tiffio.h&amp;#8217;: No such file or directory
&lt;/div&gt;

&lt;p&gt;
These are due to that libgfx used some open source libraries to fulfill image-related tasks (&lt;span class=&#34;caps&#34;&gt;JPEG&lt;/span&gt;, &lt;span class=&#34;caps&#34;&gt;PNG&lt;/span&gt;, and &lt;span class=&#34;caps&#34;&gt;TIFF&lt;/span&gt;). If you do not want to use these functions, comment out the code in the &lt;code&gt;#ifdef&lt;/code&gt;, the precompiling directives, leaving only the part
between &lt;code&gt;#else&lt;/code&gt; and &lt;code&gt;#endif&lt;/code&gt;. This won&amp;#8217;t have negative effect on the following steps. Take raster-jpeg.cxx
as an example, after commenting out unnecessary code, it should look&amp;nbsp;like&lt;/p&gt;

&lt;pre class=&#34;brush: cpp&#34;&gt;
/************************************************************************

  JPEG image file format support.
...
 ************************************************************************/

#include &amp;lt;gfx/gfx.h&amp;gt;
#include &amp;lt;gfx/raster.h&amp;gt;

// Quality factors are expressed on a 0--100 scale
int jpeg_output_quality = 100;

/* #ifdef HAVE_LIBJPEG

#include &amp;lt;stdio.h&amp;gt;
...
    return img;
}

#else */

bool write_jpeg_image(const char *, const ByteRaster&amp;amp;) { return false; }
ByteRaster *read_jpeg_image(const char *) { return NULL; }

//#endif
&lt;/pre&gt;

&lt;p&gt;
And you won&amp;#8217;t encounter the following problems in this section. Please &lt;a href=&#34;#qslim&#34;&gt;skip to QSlim&lt;/a&gt;. 
Or else, you&amp;#8217;ll have to get the library files&amp;nbsp;from
&lt;/p&gt;

&lt;table&gt;
&lt;tr class=&#34;lighter&#34;&gt;&lt;td&gt;Header file&lt;/td&gt;&lt;td&gt;Where you can get it&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;jpeglib.h&lt;/td&gt;&lt;td&gt;&lt;a href=&#34;http://www.ijg.org/&#34; target=&#34;_blank&#34;&gt;http://www.ijg.org/&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;png.h&lt;/td&gt;&lt;td&gt;&lt;a href=&#34;http://www.libpng.org/&#34; target=&#34;_blank&#34;&gt;http://www.libpng.org/&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;tiffio.h&lt;/td&gt;&lt;td&gt;&lt;a href=&#34;http://www.libtiff.org/&#34; target=&#34;_blank&#34;&gt;http://www.libtiff.org/&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;

&lt;p&gt;
When these libraries are ready in your directory, set the include paths accordingly.
&lt;strong&gt;If you are in a hurry, use the 1.4.x version of libpng, and skip to 2.4 when indicated.  &lt;/strong&gt;
However, adding to include won&amp;#8217;t solve the problem for good. You should get the following
errors in the next&amp;nbsp;compilation:
&lt;/p&gt;

&lt;div class=&#34;codebox&#34;&gt;
1&amp;gt;  raster-jpeg.cxx&lt;br&gt;
1&amp;gt;qslim-2.1\tools\jpeg-8d\jpeglib.h(25): fatal error C1083: Cannot open include file: &amp;#8216;jconfig.h&amp;#8217;: No such file or directory&lt;br&gt;
1&amp;gt;  raster-png.cxx&lt;br&gt;
1&amp;gt;qslim-2.1\tools\lpng1510\png.h(434): fatal error C1083: Cannot open include file: &amp;#8216;pnglibconf.h&amp;#8217;: No such file or directory&lt;br&gt;
1&amp;gt;  raster-tiff.cxx&lt;br&gt;
1&amp;gt;qslim-2.1\tools\tiff-4.0.1\libtiff\tiff.h(30): fatal error C1083: Cannot open include file: &amp;#8216;tiffconf.h&amp;#8217;: No such file or directory&lt;br&gt;
&lt;/div&gt;

&lt;p&gt;
Succinctly speaking, you&amp;#8217;ll need to rename some configuration header files.
Please find in the root directory of each library and do the&amp;nbsp;following
&lt;/p&gt;

&lt;table&gt;
&lt;tr class=&#34;lighter&#34;&gt;&lt;td&gt;Rename from&amp;#8230;&lt;/td&gt;&lt;td&gt;To&amp;#8230;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;jconfig.vc&lt;/td&gt;&lt;td&gt;jconfig.h&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;tiffconf.vc.h&lt;/td&gt;&lt;td&gt;tiffconf.h&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;scripts\pnglibconf.h.prebuilt&lt;/td&gt;&lt;td&gt;pnglibconf.h&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;

&lt;p&gt;
If you have questions regarding the third renaming, refer to 
&lt;a href=&#34;http://www.libpng.org/pub/png/libpng-manual.txt&#34; target=&#34;_blank&#34;&gt;
http://www.libpng.org/pub/png/libpng-manual.txt&lt;/a&gt; and the file
&amp;#8220;scripts\makefile.vcwin32&amp;#8221; under the library&amp;nbsp;directory.
&lt;/p&gt;

&lt;p&gt;
&lt;strong&gt;If you used libpng 1.4.x, you should not have found the pnglibconf file, which is ok, 
and should be able to &lt;a href=&#34;#2.4&#34;&gt;skip 
to 2.4&lt;/a&gt; now.&lt;/strong&gt; Or else, if unfortunately you are using the 1.5.x
of that library, you should get these&amp;nbsp;errors
&lt;/p&gt;

&lt;div class=&#34;codebox&#34;&gt;
1&amp;gt;..&amp;#92;..&amp;#92;src\raster-png.cxx(42): error C2027: use of undefined type &amp;#8216;png_struct_def&amp;#8217;&lt;br&gt;
1&amp;gt;          qslim-2.1\tools\lpng1510\png.h(849) : see declaration of &amp;#8216;png_struct_def&amp;#8217;&lt;br&gt;
1&amp;gt;..&amp;#92;..&amp;#92;src\raster-png.cxx(42): error C2227: left of &amp;#8216;-&amp;gt;jmpbuf&amp;#8217; must point to class/struct/union/generic type&lt;br&gt;
1&amp;gt;..&amp;#92;..&amp;#92;src\raster-png.cxx(132): error C2027: use of undefined type &amp;#8216;png_struct_def&amp;#8217;&lt;br&gt;
1&amp;gt;          qslim-2.1\tools\lpng1510\png.h(849) : see declaration of &amp;#8216;png_struct_def&amp;#8217;&lt;br&gt;
1&amp;gt;..&amp;#92;..&amp;#92;src\raster-png.cxx(132): error C2227: left of &amp;#8216;-&amp;gt;jmpbuf&amp;#8217; must point to class/struct/union/generic type
&lt;/div&gt;

&lt;p&gt;
According to &lt;a href=&#34;http://www.cegui.org.uk/phpBB2/viewtopic.php?f=2&amp;t=5848&#34; target=&#34;_blank&#34;&gt;
http://www.cegui.org.uk/phpBB2/viewtopic.php?f=2&amp;amp;t=5848&lt;/a&gt; this is due to the upgrade
of the library. I downloaded libpng 1.4.11 and it worked immediately &amp;#8212; at least for&amp;nbsp;now.
&lt;/p&gt;

&lt;div class=&#34;title&#34;&gt;&lt;a name=&#34;2.4&#34;&gt;&lt;/a&gt;&lt;h3&gt;2.4&lt;/h3&gt;&lt;/div&gt;

&lt;p&gt;
Now welcome to the last error in this&amp;nbsp;project.
&lt;/p&gt;

&lt;div class=&#34;codebox&#34;&gt;
1&amp;gt;  raster-png.cxx&lt;br&gt;
1&amp;gt;qslim-2.1\tools\lpng1411\png.h(421): fatal error C1083: Cannot open include file: &amp;#8216;zlib.h&amp;#8217;: No such file or directory
&lt;/div&gt;

&lt;p&gt;
This is due to the missing &lt;a href=&#34;http://zlib.net&#34; target=&#34;_blank&#34;&gt;zlib&lt;/a&gt;
 in your include directory. Download one and add it to your include path. Mine
 is:&amp;nbsp;..&amp;#92;..&amp;#92;..&amp;#92;tools\zlib-1.2.6;
&lt;/p&gt;

&lt;p&gt;
Now libgfx is also&amp;nbsp;ready.
&lt;/p&gt;

&lt;div class=&#34;title&#34;&gt;&lt;a name=&#34;qslim&#34;&gt;&lt;/a&gt;&lt;h2&gt;3.&amp;nbsp;QSlim&lt;/h2&gt;&lt;/div&gt;

&lt;div class=&#34;title&#34;&gt;&lt;h3&gt;3.1&lt;/h3&gt;&lt;/div&gt;

&lt;p&gt;
Try building QSlim, and you&amp;#8217;ll get&amp;nbsp;this:
&lt;/p&gt;

&lt;div class=&#34;codebox&#34;&gt;
1&amp;gt;  cmdline.cxx&lt;br&gt;
1&amp;gt;..&amp;#92;..&amp;#92;tools\qslim\cmdline.cxx(17): fatal error C1083: Cannot open include file: &amp;#8216;getopt.h&amp;#8217;: No such file or directory
&lt;/div&gt;

&lt;p&gt;
Remember when we were compiling MixKit we omitted a directory? This 
is it. This time there&amp;#8217;s no escape, you&amp;#8217;ll have to use a windows counterpart.
Fortunately, there is one. &lt;a href=&#34;http://www.codeproject.com/Articles/1940/XGetopt-A-Unix-compatible-getopt-for-MFC-and-Win32&#34;
target=&#34;_blank&#34;&gt; XGetOpt&lt;/a&gt; is the solution you&amp;#8217;ll need. Download it
and add it to the include&amp;nbsp;directory.
&lt;/p&gt;

&lt;p&gt;
&lt;strong&gt;Also remember to add the &amp;#8220;XGetopt.cpp&amp;#8221; file in your project
to avoid link&amp;nbsp;problems.&lt;/strong&gt;
&lt;/p&gt;

&lt;p class=&#34;news&#34;&gt;&lt;span class=&#34;lighter&#34;&gt;&lt;span class=&#34;caps&#34;&gt;NOTE&lt;/span&gt;&lt;/span&gt;&lt;br&gt;
In fact, we should have built the getopt function inside MixKit, so that
when linking, it can be linked as binary. I did not find out until I finished
compiling QSlim. What a&amp;nbsp;shame.
&lt;/p&gt;

&lt;div class=&#34;title&#34;&gt;&lt;h3&gt;3.2&lt;/h3&gt;&lt;/div&gt;

&lt;p&gt;
The next problem is&amp;nbsp;weird.
&lt;/p&gt;

&lt;div class=&#34;codebox&#34;&gt;
1&amp;gt;  cmdline.cxx&lt;br&gt;
1&amp;gt;qslim-2.1\tools\XGetopt_demo\XGetopt.h(19): error C2143: syntax error : missing &amp;#8216;;&amp;#8217; before &amp;#8216;*&amp;#8217;&lt;br&gt;
1&amp;gt;qslim-2.1\tools\XGetopt_demo\XGetopt.h(19): error C4430: missing type specifier - int assumed. Note: C++ does not support default-int&lt;br&gt;
1&amp;gt;qslim-2.1\tools\XGetopt_demo\XGetopt.h(19): error C4430: missing type specifier - int assumed. Note: C++ does not support default-int&lt;br&gt;
1&amp;gt;qslim-2.1\tools\XGetopt_demo\XGetopt.h(21): error C2061: syntax error : identifier &amp;#8216;&lt;span class=&#34;caps&#34;&gt;TCHAR&lt;/span&gt;&amp;#8217;
&lt;/div&gt;

&lt;p&gt;
What I recommend is that you &lt;code&gt;#include &amp;lt;tchar.h&amp;gt;&lt;/code&gt; in XGetopt.h, 
and switch in XGetopt.cpp from &lt;code&gt;&#34;stdafx.h&#34;&lt;/code&gt; to &lt;code&gt;&amp;lt;windows.h&amp;gt;&lt;/code&gt;, 
&lt;code&gt;&amp;lt;stdio.h&amp;gt;&lt;/code&gt;, and &lt;code&gt;&amp;lt;tchar.h&amp;gt;&lt;/code&gt;, as we are not using
pre-compiled headers&amp;nbsp;here.
&lt;/p&gt;

&lt;div class=&#34;title&#34;&gt;&lt;h3&gt;3.3&lt;/h3&gt;&lt;/div&gt;

&lt;p&gt;
The next problem is&amp;nbsp;weirder.
&lt;/p&gt;

&lt;div class=&#34;codebox&#34;&gt;
1&amp;gt;..&amp;#92;..&amp;#92;tools\qslim\qslim.cxx(36): error C4430: missing type specifier - int assumed. Note: C++ does not support default-int
&lt;/div&gt;

&lt;p&gt;
function &lt;code&gt;main&lt;/code&gt; has no returning data type! Whatever, &lt;code&gt;int&lt;/code&gt; will do the&amp;nbsp;trick.
&lt;/p&gt;

&lt;div class=&#34;title&#34;&gt;&lt;h3&gt;3.4&lt;/h3&gt;&lt;/div&gt;

&lt;p&gt;
Now welcome to the final nasty part. In the following 
error message I omitted 20 lines of link&amp;nbsp;errors&lt;/p&gt;

&lt;div class=&#34;codebox&#34;&gt;
1&amp;gt;.\Release\QSlim.exe : fatal error &lt;span class=&#34;caps&#34;&gt;LNK1120&lt;/span&gt;: 20 unresolved externals
&lt;/div&gt;

&lt;p&gt;
Remember the include directory window? This time choose from the left
&amp;#8220;Configuration Properties &amp;gt; Linker &amp;gt; Input&amp;#8221;, and add these two
paths into your &amp;#8220;Additional Dependencies&amp;#8221;:&amp;nbsp;&amp;#8221;../../libgfx/vc6/libgfx/Release/libgfx.lib;../../mixkit/Release/MixKit.lib;&amp;#8221;
&lt;/p&gt;

&lt;p&gt;
This is to tell your linker where the external binary resources are located,
so that external libraries can be linked in to complete your&amp;nbsp;QSlim.exe.&lt;/p&gt;

&lt;p&gt;
&lt;br&gt;
Now you should be able to successfully compile your QSlim 2.1 with 
Visual Studio.&amp;nbsp;Enjoy!!
&lt;/p&gt;

&lt;div class=&#34;title&#34;&gt;&lt;a name=&#34;resources&#34;&gt;&lt;/a&gt;&lt;h2&gt;Related&amp;nbsp;Resources&lt;/h2&gt;&lt;/div&gt;

&lt;p&gt;
The compiled QSlim.exe (Configuration:&amp;#8221;Release&amp;#8221;, Platform:&amp;#8221;Win32&amp;#8221;): 
&lt;a href=&#34;compiling-qslim-21/QSlim.zip&#34; target=&#34;_blank&#34;&gt;QSlim.zip&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
The full configured &lt;span class=&#34;caps&#34;&gt;VS2010&lt;/span&gt; solution with all required libraries packed:
&lt;a href=&#34;compiling-qslim-21/qslim-2.1.zip&#34; target=&#34;_blank&#34;&gt;qslim-2.1.zip&lt;/a&gt;
&lt;/p&gt;

&lt;div class=&#34;title&#34;&gt;&lt;h2&gt;See&amp;nbsp;Also&amp;#8230;&lt;/h2&gt;&lt;/div&gt;

&lt;p&gt;
&lt;a href=&#34;/software/bugfix-qslim-21.html&#34;&gt; An Unofficial &amp;#8220;Bugfix&amp;#8221; for QSlim&amp;nbsp;2.1&lt;/a&gt;
&lt;/p&gt;            </content>
        </entry>
            <entry>
            <title type="html">Tutorial 2&#58; The hyde Template Files</title>
            <author><name>Peng Qi</name></author>
            <link href="/blog/tutorial-2.html"/>
            <updated>2012-04-10T17:00:00Z</updated>
            <published>2012-04-10T17:00:00Z</published>
            <id>/blog/tutorial-2.html</id>
                        <category   scheme="/blog/tags"
                        term="tutorial"
                        label="Tutorial" />
                        <category   scheme="/blog/tags"
                        term="hyde"
                        label="Hyde" />
                        <category   scheme="/blog/tags"
                        term="html_css"
                        label="Html_Css" />
            
            <content type="html">
                                &lt;p&gt;&lt;link rel=&#34;stylesheet&#34; href=&#34;/media/css/syntaxhighlighter/shCoreEclipse.css&#34; type=&#34;text/css&#34;&gt;
&lt;link rel=&#34;stylesheet&#34; href=&#34;/media/css/syntaxhighlighter/shThemeEclipse.css&#34; type=&#34;text/css&#34;&gt;&lt;/p&gt;
&lt;script type=&#34;text/javascript&#34; src=&#34;/media/js/syntaxhighlighter/shCore.js&#34;&gt;&lt;/script&gt;

&lt;script type=&#34;text/javascript&#34; src=&#34;/media/js/syntaxhighlighter/shBrushJScript.js&#34;&gt;&lt;/script&gt;

&lt;script type=&#34;text/javascript&#34; src=&#34;/media/js/syntaxhighlighter/shBrushCss.js&#34;&gt;&lt;/script&gt;

&lt;script type=&#34;text/javascript&#34; src=&#34;/media/js/syntaxhighlighter/shBrushXml.js&#34;&gt;&lt;/script&gt;

&lt;script type=&#34;text/javascript&#34; src=&#34;/media/js/syntaxhighlighter/shBrushBash.js&#34;&gt;&lt;/script&gt;

&lt;script type=&#34;text/javascript&#34;&gt;SyntaxHighlighter.all()&lt;/script&gt;

&lt;p&gt;
This post, I think, is important for those who want to re-develop this template on their 
own site, and especially who has little background of hyde/Django/Python as myself. 
In this post, I&amp;#8217;ll summarize all hacks that I did to the basic hyde template that 
made this homepage what it looks like&amp;nbsp;now.&lt;/p&gt;

&lt;p&gt;
Before starting this tutorial, I&amp;#8217;d like to thank again &lt;a href=&#34;http://qiankanglai.github.com/&#34; target=&#34;_blank&#34;&gt;
Kanglai Qian&lt;/a&gt; for his help regarding &lt;span class=&#34;caps&#34;&gt;YAML&lt;/span&gt;, Python, and the hyde site structure. This 
template will be nothing like it is without his&amp;nbsp;help.
&lt;/p&gt;

&lt;p&gt;
This tutorial will be roughly separated into 7 parts. Except the first part which gives a brief 
but necessary introduction to the directory structure of the default hyde site, each part will introduce a 
.j2 (the new hyde template file format of my working version 0.8.4) file that I hacked, 
and how I adjusted the &lt;span class=&#34;caps&#34;&gt;CSS&lt;/span&gt; for appearance. I plan to cover in the next tutorial 
 a shortcut on how to make the contents yours and use this template right&amp;nbsp;away.
&lt;/p&gt;

&lt;p&gt;
Let&amp;#8217;s start from the basic hyde template by &lt;a href=&#34;https://github.com/lakshmivyas&#34; target=&#34;_blank&#34;&gt;
Lakshmi Vyasarajan&lt;/a&gt;, the original developer of hyde. To get the basic hyde template,
simply type into your Linux console (I used the powerful &lt;a href=&#34;http://www.cygwin.com/&#34;
target=&#34;_blank&#34;&gt;Cygwin&lt;/a&gt; under&amp;nbsp;Windows):
&lt;/p&gt;

&lt;pre class=&#34;brush: bash&#34;&gt;
mkdir the-directory-name-you-want-to-store-your-hyde-files
cd the-directory-name-you-want-to-store-your-hyde-files
hyde create
&lt;/pre&gt;

&lt;p&gt;
The &amp;#8220;hyde create&amp;#8221; command creates hyde source files of a website with basic hyde. 
To see what this basic template looks like,&amp;nbsp;type:
&lt;/p&gt;

&lt;pre class=&#34;brush: bash&#34;&gt;
hyde gen
hyde serve
&lt;/pre&gt;

&lt;p&gt;
&lt;span class=&#34;dquo&#34;&gt;&amp;#8220;&lt;/span&gt;hyde gen&amp;#8221; will compile all hyde sources into the &amp;#8220;deploy&amp;#8221; directory, and &amp;#8220;hyde
serve&amp;#8221; will run a light-weight python web server that enables you to view
your site properly at your local machine. The default binding is &amp;#8220;http://localhost:8080&amp;#8221;.
(Hint: it is more practical to run two bash/command-line programs, and always use
one as the hyde server.) Note that this hyde server is nothing compared to 
a real-world one, and should not be used under any circumstance other than
local&amp;nbsp;debugging.
&lt;/p&gt;

&lt;div class=&#34;title&#34;&gt;&lt;h2&gt;The Basic hyde Source Directory&amp;nbsp;Structure&lt;/h2&gt;&lt;/div&gt;

&lt;p&gt;
After running &amp;#8220;hyde gen&amp;#8221;, you should get a directory struture similar to this:&lt;br&gt;
&lt;pre class=&#34;codebox&#34;&gt;
+ content
|- + blog
|- + media
   |- + css
   |- + js
   |- + images
   |- - meta.yaml
|- + portfolio
|- - favicon.ico
|- - index.html
|- - ...
+ layout
|- - analytics.j2
|- - atom.j2
|- - base.j2
|- - blog.j2
|- - devmode.j2
|- - listing.j2
|- - macros.j2
|- - tagged_posts.j2
- README.markdown
- info.yaml
- site.yaml
&lt;/pre&gt;
I did not expand here some directories as they will not be used here. 
In the layout directory, you&amp;#8217;ll find all .j2 files that will be mentioned&amp;nbsp;below.
&lt;/p&gt;

&lt;div class=&#34;title&#34;&gt;&lt;h2&gt;base.j2&lt;/h2&gt;&lt;/div&gt;

&lt;p&gt;
This file determines the basic layout of each generated &lt;span class=&#34;caps&#34;&gt;HTML&lt;/span&gt; file on your
site. As you open other .j2 files, for example, &amp;#8220;blog.j2&amp;#8221;, &amp;#8220;listing.j2&amp;#8221;, 
or &amp;#8220;tagged_posts.j2&amp;#8221;, you&amp;#8217;ll see that the first line is
&lt;pre class=&#34;codebox&#34;&gt;
{&amp;#37; extends &amp;quot;base.j2&amp;quot; &amp;#37;}
&lt;/pre&gt;
This means that the layout is inherited from &amp;#8220;base.j2&amp;#8221;. Thus, to change 
the look of the whole site, &amp;#8220;base.j2&amp;#8221; should play the most important&amp;nbsp;role.
&lt;/p&gt;
&lt;p&gt;
If you open &amp;#8220;base.j2&amp;#8221; with text editor, you&amp;#8217;ll see familiar &lt;span class=&#34;caps&#34;&gt;HTML&lt;/span&gt;-like 
code. In fact, except for those enclosed with &amp;#8220;&lt;code&gt;{&amp;#37; &amp;#37;}&lt;/code&gt;&amp;#8220;, 
all the other are &lt;span class=&#34;caps&#34;&gt;HTML&lt;/span&gt; code. Thus, you can change the look of it as 
you usually do with HTMLs. There are also some awesome tricks in the generated 
basic hyde site. For example, in &amp;#8220;content/media/css/site.css&amp;#8221;, you&amp;#8217;ll find many
&lt;span class=&#34;caps&#34;&gt;CSS&lt;/span&gt; tricks of round-corner boxes, shadows, and gradients (which consists of 
most visual effects of my&amp;nbsp;site).
&lt;/p&gt;
&lt;p&gt;
But before you continue, I&amp;#8217;d like to introduce a powerful structure in 
hyde templates: block. Beginning with &lt;code&gt;{&amp;#37; block blockname &amp;#37;}&lt;/code&gt; 
and ending with &lt;code&gt;{&amp;#37; endblock &amp;#37;}&lt;/code&gt;, blocks are &amp;#8220;slots&amp;#8221; for 
content that can be replaced in future content files or other extending 
layout files. To replace its content, simply use the same block name in the 
file or extending layout file, and consider it copy-and-pasted into the 
slot you left. Here&amp;#8217;s a quick example on how I implemented the tag floating 
on the right (in&amp;nbsp;&amp;#8220;base.j2&amp;#8221;):
&lt;/p&gt;
&lt;pre class=&#34;brush: html&#34;&gt;
&amp;lt;div class=&#34;content-back&#34;&amp;gt;
&amp;lt;div class=&#34;content-right&#34;&amp;gt;
&amp;#123;&amp;#37; block contentright &amp;#37;&amp;#125;&amp;#123;&amp;#37; endblock &amp;#37;&amp;#125;
&amp;lt;div class=&#34;right-float&#34;&amp;gt;&amp;lt;div id=&#34;googletranslate&#34; style=&#34;font-size:10px;&#34;&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;div class=&#34;contentwrapper&#34;&amp;gt;
&amp;lt;section class=&#34;content&#34;&amp;gt;
&amp;#123;&amp;#37; block main &amp;#37;&amp;#125;
&amp;#123;&amp;#37; endblock main &amp;#37;&amp;#125;
&amp;lt;/section&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/pre&gt;
&lt;p&gt;
Here, the &lt;code&gt;&amp;lt;div class=&#34;content-right&#34; /&amp;gt;&lt;/code&gt; contains a block named 
&amp;#8220;contentright&amp;#8221;, and in &amp;#8220;blog.j2&amp;#8221;, it&amp;#8217;s used&amp;nbsp;as:
&lt;/p&gt;
&lt;pre class=&#34;brush: html&#34;&gt;
&amp;#123;&amp;#37; block contentright &amp;#37;&amp;#125;
&amp;#123;&amp;#37; if resource.meta.tags &amp;#37;&amp;#125;
&amp;lt;div class=&#34;right-float&#34;&amp;gt;
&amp;lt;span class=&#34;lighter&#34;&amp;gt;Tags:&amp;lt;/span&amp;gt;&amp;lt;br/&amp;gt;
&amp;lt;ul class=&#34;tags clear&#34;&amp;gt;
&amp;#123;&amp;#37; for tag in resource.meta.tags &amp;#37;&amp;#125;
&amp;lt;li&amp;gt;
  &amp;lt;a class=&#34;small&#34; href=&#34;&amp;#123;&amp;#123; content_url(&#39;blog/tags/&#39;~tag~&#39;.html&#39;) &amp;#125;&amp;#125;&#34;&amp;gt;
    &amp;#123;&amp;#123; tag &amp;#125;&amp;#125;
  &amp;lt;/a&amp;gt;
&amp;lt;/li&amp;gt;
&amp;#123;&amp;#37; endfor &amp;#37;&amp;#125;
&amp;lt;/ul&amp;gt;
&amp;lt;/div&amp;gt;
&amp;#123;&amp;#37; endif &amp;#37;&amp;#125;
&amp;#123;&amp;#37; endblock &amp;#37;&amp;#125;
&lt;/pre&gt;
&lt;p&gt;
That&amp;#8217;s how the floater with tags of this blog placed on the right of the&amp;nbsp;text.
&lt;/p&gt;

&lt;div class=&#34;title&#34;&gt;&lt;h2&gt;listing.j2&lt;/h2&gt;&lt;/div&gt;

&lt;p&gt;
&lt;span class=&#34;dquo&#34;&gt;&amp;#8220;&lt;/span&gt;listing.j2&amp;#8221; determines the look of the blog (or other items you like) list (
it&amp;#8217;s what you see when you click the &amp;#8220;Blog&amp;#8221; navi button above). 
I simply changed the layout from the original floating to list-style. There&amp;#8217;s 
really nothing much to say about it. For details of the layout and coloring, 
it is strongly recommended that you take some time to hack 
&lt;a href=&#34;https://github.com/qipeng/homepage&#34; target=&#34;_blank&#34;&gt;my source code&lt;/a&gt; and 
the &lt;span class=&#34;caps&#34;&gt;CSS&lt;/span&gt; (site.css) on your own. Google Chrome or Firefox will also be of 
great help if you want to see the actual outcome of &lt;code&gt;hyde gen&lt;/code&gt;.
&lt;/p&gt;

&lt;p&gt;
Also, for the non-chronological items such as &amp;#8220;Software&amp;#8221;, &amp;#8220;Research&amp;#8221;, and &amp;#8220;Misc&amp;#8221;, 
I made a modified copy of listing.j2:&amp;nbsp;listing-no-time.j2.
&lt;/p&gt;

&lt;p&gt;
What? You are saying that you cannot change the appearance of blog excerpts after 
reading this section? No doubt that would happen. This will be covered in macros.j2. 
&lt;a href=&#34;#macros&#34;&gt;Take a shortcut and see it&amp;nbsp;now!&lt;/a&gt;
&lt;/p&gt;

&lt;div class=&#34;title&#34;&gt;&lt;h2&gt;blog.j2&lt;/h2&gt;&lt;/div&gt;

&lt;p&gt;
This file determines how your blog contents are rendered. The greatest change I made 
to this file are (a) I changed the look of the blog navigation, and (b) I changed the 
look and position of blog tags. These are essentially basic &lt;span class=&#34;caps&#34;&gt;HTML&lt;/span&gt; operations, so I won&amp;#8217;t 
cover them&amp;nbsp;here. 
&lt;/p&gt;

&lt;p&gt;
However, the nagivation did involve some hyde tricks. It&amp;#8217;s related to plugins called 
&amp;#8220;sorter&amp;#8221; and &amp;#8220;grouper&amp;#8221;, and you must define groups in the &amp;#8220;site.yaml&amp;#8221; file. The related 
code pieces in my &amp;#8220;site.yaml&amp;#8221;&amp;nbsp;are:
&lt;/p&gt;

&lt;pre class=&#34;codebox&#34;&gt;
...
plugins:
    - hyde.ext.plugins.sorter.SorterPlugin
    - hyde.ext.plugins.grouper.GrouperPlugin
...
meta:
    toc: root
...
sorter:
    reversetime:
        attr:
            - meta.created
        reverse: true
        filters:
            source.kind: html
            meta.listable: true
    time:
        attr:
            - meta.created
        filters:
            source.kind: html
            meta.listable: true
grouper:
    toc:
        sorter: reversetime
        hide_name: True
        groups:
            -
                name: root
                hide_name: True
                groups:
                    -
                        name: Blog
                    -
                        name: Software
                    -
                        name: Research
                    -
                        name: Misc
&lt;/pre&gt;

&lt;p&gt;
And in each content directory, for example, &amp;#8220;blog&amp;#8221;, you should include a corresponding line 
in the &amp;#8220;meta.yaml&amp;#8221; file: &lt;code&gt;toc: Blog&lt;/code&gt;. After all these are done, you should be 
able to use the following code to generate a navigation in your&amp;nbsp;&amp;#8220;blog.j2&amp;#8221;:
&lt;/p&gt;

&lt;pre class=&#34;brush: html&#34;&gt;
&amp;lt;nav class=&#34;postnav before&#34;&amp;gt;
Previous:
&amp;#123;% if resource.prev_in_toc and resource.prev_in_toc.meta.toc == resource.meta.toc %&amp;#125;
&amp;lt;a href=&#34;&amp;#123;&amp;#123; content_url(resource.prev_in_toc.url) &amp;#125;&amp;#125;&#34;&amp;gt;&amp;#123;&amp;#123; resource.prev_in_toc.meta.title &amp;#125;&amp;#125;&amp;lt;/a&amp;gt;
&amp;#123;% else %&amp;#125;
None
&amp;#123;% endif %&amp;#125;
&amp;lt;br/&amp;gt;

Next:
&amp;#123;% if resource.next_in_toc and resource.next_in_toc.meta.toc == resource.meta.toc %&amp;#125;
&amp;lt;a href=&#34;&amp;#123;&amp;#123; content_url(resource.next_in_toc.url) &amp;#125;&amp;#125;&#34;&amp;gt;&amp;#123;&amp;#123; resource.next_in_toc.meta.title &amp;#125;&amp;#125;&amp;lt;/a&amp;gt;
&amp;#123;% else %&amp;#125;
None
&amp;#123;% endif %&amp;#125;
&amp;lt;/nav&amp;gt;
&lt;/pre&gt;

&lt;p&gt;
&lt;code&gt;resource.meta.toc&lt;/code&gt; will refer to the &lt;code&gt;toc&lt;/code&gt; you defined in the 
directory&amp;#8217;s &amp;#8220;meta.yaml&amp;#8221; file, this is determined in &amp;#8220;site.yaml&amp;#8221;. The 
&lt;code&gt;next_in_toc&lt;/code&gt; is the next node, which is determined by the grouper &amp;#8220;toc&amp;#8221;, 
which is then determined by the sorter &amp;#8220;reversetime&amp;#8221;. Since all groups are concatenated 
here, it will give you the next blog (or whatever) in the current group by time. If that 
does not exist, it will give you a node in the neighboring group. That is why the 
&lt;code&gt;&amp;#123;% if %&amp;#125;&lt;/code&gt; is&amp;nbsp;necessary.
&lt;/p&gt;

&lt;div class=&#34;title&#34;&gt;&lt;a name=&#34;macros&#34;&gt;&lt;/a&gt;&lt;h2&gt;macros.j2&lt;/h2&gt;&lt;/div&gt;

&lt;p&gt;
Here comes the interesting part. &amp;#8220;macros.j2&amp;#8221; defines how your blog excerpts are rendered, 
and how your tagged posts are rendered in the tag page. In fact, there&amp;#8217;s nothing special. 
Here&amp;#8217;s my version of the macro &lt;code&gt;render_excerpt&lt;/code&gt;:
&lt;/p&gt;

&lt;pre class=&#34;codebox&#34;&gt;
&amp;#123;% macro render_excerpt(res, class=None) %&amp;#125;
&amp;#123;% refer to res.url as post %&amp;#125;
&amp;lt;article &amp;#123;&amp;#123;&#39;class=&#39;~class if class &amp;#125;&amp;#125;&amp;gt;
&amp;lt;div class=&#34;title&#34;&amp;gt;&amp;lt;h2&amp;gt;&amp;lt;a href=&#34;&amp;#123;&amp;#123; content_url(res.url) &amp;#125;&amp;#125;&#34;&amp;gt;&amp;#123;&amp;#123; res.meta.title &amp;#125;&amp;#125;&amp;lt;/a&amp;gt;&amp;lt;/h2&amp;gt;&amp;lt;/div&amp;gt;
&amp;#123;&amp;#123; post.image|markdown|typogrify &amp;#125;&amp;#125;
&amp;#123;&amp;#123; post.excerpt|markdown|typogrify &amp;#125;&amp;#125;...
&amp;lt;time datetime=&#34;&amp;#123;&amp;#123; res.meta.created.strftime(&#39;%Y-%m-%d&#39;) &amp;#125;&amp;#125;&#34;&amp;gt;
    Posted: &amp;#123;&amp;#123; res.meta.created.strftime(&#39;%a, %d %b %Y&#39;) &amp;#125;&amp;#125;
&amp;lt;/time&amp;gt;
&amp;lt;/article&amp;gt;
&amp;#123;% endmacro %&amp;#125;
&lt;/pre&gt;

&lt;p&gt;
I simply changed the appearance of the excerpt to make it more harmonious 
with my template. The &lt;code&gt;&amp;#123;&amp;#123; post.image|markdown|typogrify &amp;#125;&amp;#125;&lt;/code&gt; 
and &lt;code&gt;&amp;#123;&amp;#123; post.excerpt|markdown|typogrify &amp;#125;&amp;#125;&lt;/code&gt; part 
will refer to &lt;code&gt;&amp;#123; mark image &amp;#125;&lt;/code&gt; and &lt;code&gt;&amp;#123; mark excerpt &amp;#125;&lt;/code&gt;, 
respectively, in the actual content file. Here you can use markdown for simplicity.
 &lt;code&gt;res.meta.title&lt;/code&gt; and &lt;code&gt;res.meta.created&lt;/code&gt; 
are also defined in the content file. These parts of this very blog post are&amp;nbsp;like:
&lt;/p&gt;

&lt;pre class=&#34;codebox&#34;&gt;
---
title: Tutorial 2&amp;amp;#58; The hyde Template Files
description: &amp;gt;
    The second tutorial of the template.
created: !!timestamp &#39;2012-4-10 17:00:00&#39;
tags:
    - tutorial
    - hyde
    - html_css
---
&amp;#123;% block css %&amp;#125;
&amp;lt;link ...
&amp;#123;% endblock %&amp;#125;

&amp;#123;% block scripts %&amp;#125;
&amp;lt;script ...
&amp;#123;% endblock %&amp;#125;

&amp;#123;% mark image -%&amp;#125;
&amp;#123;%- endmark %&amp;#125;
&amp;lt;p&amp;gt;
&amp;#123;% mark excerpt -%&amp;#125;

This post, I think, is important for those who want to re-develop this template on their 
own site, and especially who has little background of hyde/Django/Python as myself. 
In this post, I&#39;ll summarize all hacks that I did to the basic hyde template that 
made this homepage what it looks like now.

&amp;#123;%- endmark %&amp;#125;
&lt;/pre&gt;

&lt;p&gt;
&lt;code&gt;&amp;amp;#58;&lt;/code&gt; is the &lt;span class=&#34;caps&#34;&gt;HTML&lt;/span&gt; code for &amp;#8220;&amp;#58;&amp;#8221;. This is used as &amp;#8220;:&amp;#8221; is forbidden in
titles. So it&amp;#8217;s recommended that you use &lt;span class=&#34;caps&#34;&gt;ASCII&lt;/span&gt; code for all special marks.
A complete list of special &lt;span class=&#34;caps&#34;&gt;HTML&lt;/span&gt; &lt;span class=&#34;caps&#34;&gt;ASCII&lt;/span&gt; symbols can be found 
&lt;a href=&#34;http://www.w3schools.com/tags/ref_ascii.asp&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt;.
&lt;/p&gt;

&lt;p&gt;
I also wrote a macro named &lt;code&gt;render_news&lt;/code&gt; to render the News section 
on my homepage, and it might be useful to show you how a macro is&amp;nbsp;used.
&lt;/p&gt;

&lt;p&gt;In&amp;nbsp;layout/macros.j2:&lt;/p&gt;

&lt;pre class=&#34;codebox&#34;&gt;
&amp;#123;% macro render_news(res, class=None) %&amp;#125;
&amp;#123;% refer to res as post %&amp;#125;
&amp;lt;ul &amp;#123;&amp;#123;&#39;class=&#39;~class if class&amp;#125;&amp;#125;&amp;gt;
&amp;#123;&amp;#123; post.latest &amp;#125;&amp;#125;
&amp;lt;/ul&amp;gt;
&amp;#123;% endmacro %&amp;#125;
&lt;/pre&gt;

&lt;p&gt;In&amp;nbsp;content/index.html:&lt;/p&gt;

&lt;pre class=&#34;brush: html&#34;&gt;
&amp;#123;% from &#34;macros.j2&#34; import render_news with context  %&amp;#125;
&amp;lt;div class=&#34;title&#34;&amp;gt;&amp;lt;h2&amp;gt;&amp;lt;a href=&#34;news.html&#34;&amp;gt;News&amp;lt;/a&amp;gt;&amp;lt;/h2&amp;gt;&amp;lt;/div&amp;gt;
&amp;#123;&amp;#123; render_news(&#34;news.html&#34;,&#34;news&#34;) &amp;#125;&amp;#125;
&lt;/pre&gt;

&lt;p&gt;In&amp;nbsp;content/news.html:&lt;/p&gt;

&lt;pre class=&#34;brush: html&#34;&gt;
...
&amp;#123;% block main %&amp;#125;
&amp;lt;section&amp;gt;
&amp;lt;div class=&#34;title&#34;&amp;gt;&amp;lt;h1&amp;gt;News&amp;lt;/h1&amp;gt;&amp;lt;/div&amp;gt;
&amp;lt;ul class=&#34;news&#34;&amp;gt;
&amp;#123;% mark latest -%&amp;#125;
&amp;lt;li&amp;gt;Apr. 1, 2012 ...&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;Mar. 29, 2012 ...&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;Mar. 8, 2012 ...&amp;lt;/li&amp;gt;
&amp;#123;%- endmark %&amp;#125;
&amp;lt;li&amp;gt;Nov. 30, 2011 ...&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
&amp;lt;/section&amp;gt;
&amp;#123;% endblock %&amp;#125;
&lt;/pre&gt;

&lt;div class=&#34;title&#34;&gt;&lt;h2&gt;tagged_posts.j2&lt;/h2&gt;&lt;/div&gt;

&lt;p&gt;
This file determines how the assemble of tagged blogs are rendered. See the 
&lt;a href=&#34;/blog/tags/tutorial.html&#34; target=&#34;_blank&#34;&gt;&amp;#8220;tutorial&amp;#8221;&lt;/a&gt; page 
for a quick example. There&amp;#8217;s really nothing much to say about&amp;nbsp;this.
&lt;/p&gt;

&lt;div class=&#34;title&#34;&gt;&lt;h2&gt;analytics.j2&lt;/h2&gt;&lt;/div&gt;

&lt;p&gt;
This file is the &lt;a href=&#34;http://www.google.com/analytics&#34; target=&#34;_blank&#34;&gt;Google Analytics&lt;/a&gt;
snippet attached to your site. It&amp;#8217;s attached to the &amp;#8220;base.j2&amp;#8221; file. It&amp;#8217;s only 
enabled in the generated site if the mode of your site is &amp;#8220;production&amp;#8221;. To 
enable Google Analytics, configure your&amp;nbsp;&amp;#8220;site.yaml&amp;#8221;:
&lt;/p&gt;

&lt;pre class=&#34;codebox&#34;&gt;
mode: production
...
meta:
    analytics:
        id: UA-XXX
...
&lt;/pre&gt;

&lt;p&gt;
Remember to replace &amp;#8220;&lt;span class=&#34;caps&#34;&gt;UA&lt;/span&gt;-&lt;span class=&#34;caps&#34;&gt;XXX&lt;/span&gt;&amp;#8221; with your property&amp;nbsp;&lt;span class=&#34;caps&#34;&gt;ID&lt;/span&gt;.
&lt;/p&gt;            </content>
        </entry>
            <entry>
            <title type="html">Notes on Matlab Parallel Programming</title>
            <author><name>Peng Qi</name></author>
            <link href="/blog/matlab-parallel.html"/>
            <updated>2012-08-22T17:24:00Z</updated>
            <published>2012-08-22T17:24:00Z</published>
            <id>/blog/matlab-parallel.html</id>
                        <category   scheme="/blog/tags"
                        term="Matlab"
                        label="Matlab" />
                        <category   scheme="/blog/tags"
                        term="parallel"
                        label="Parallel" />
                        <category   scheme="/blog/tags"
                        term="programming"
                        label="Programming" />
            
            <content type="html">
                                &lt;p&gt;
Recently, I am doing research which involve extensive computation with Matlab. 
Luckily, most of this computation can be done in a parallel fashion, and this can
be instantly accomplished with the Matlab parallel toolbox. During using this
toolbox, I summarized some notes that need to be remembered, to accelerate future&amp;nbsp;work.&lt;/p&gt;

&lt;p class=&#39;lighter&#39;&gt;
This post will be constantly updated during my use of Matlab parallel programming.
Update log:
&lt;ul class=&#39;news&#39;&gt;
&lt;li&gt;
Aug. 22, 2012 - matlabpool,&amp;nbsp;parfor
&lt;/li&gt;
&lt;/ul&gt;
&lt;/p&gt;

&lt;div class=&#39;title&#39;&gt;&lt;h2&gt;matlabpool&lt;/h2&gt;&lt;/div&gt;

&lt;p&gt;
&lt;span class=&#34;code&#34;&gt;matlabpool&lt;/span&gt; command is essential if you want to use the Matlab parallel programming
features. It opens several workers (several Matlab processes), and uses the current
Matlab process as the coordinator to run parallel jobs. The structure is a star-shape,
where the current process is the &amp;#8220;supervisor&amp;#8221; of the workers it manages. 
&lt;a href=&#34;#ref1&#34;&gt;[1]&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
To use the command, simply typing &lt;span class=&#39;code&#39;&gt;matlabpool&lt;/span&gt; or 
&lt;span class=&#39;code&#39;&gt;matlabpool open&lt;/span&gt; will do the job. This uses the default
configuration named &amp;#8220;local&amp;#8221;, which deploys &lt;i&gt;n&lt;/i&gt; workers on the local
computer, where &lt;i&gt;n&lt;/i&gt; is the number of cores of your&amp;nbsp;&lt;span class=&#34;caps&#34;&gt;CPU&lt;/span&gt;.
&lt;/p&gt;

&lt;p&gt;
Always remember to close your workers before exiting Matlab. In my experience, if
you do not close them, the processes will be killed, but the task remains. To close
the Matlab pool, type &lt;span class=&#39;code&#39;&gt;matlabpool close&lt;/span&gt; or &lt;span class=&#39;code&#39;&gt;
matlabpool close force&lt;/span&gt;. The latter is *strongly recommended* in case of
accidentally unfinished or user-breaked tasks. If you do not free previous tasks in the 
Matlab pool, the performance of the current task will be affected, even if you&amp;#8217;ve 
already exited Matlab once without closing the&amp;nbsp;pool.
&lt;/p&gt;

&lt;p&gt;
So, in my experience, it is recommended to always use:
&lt;pre class=&#39;codebox brush: matlab&#39;&gt;
matlabpool close force;
matlabpool open;
&lt;/pre&gt;
if you want to work with Matlab paralell programming efficiently (and&amp;nbsp;locally).
&lt;/p&gt;

&lt;p&gt;
The implementation of &lt;span class=&#39;node&#39;&gt;matlabpool&lt;/span&gt; involves network communication, serialization and
deserialization, offering the possibility of using configurations other than &amp;#8220;local&amp;#8221;
to work on remote or even multiple remote computers. I&amp;#8217;ll cover that when it&amp;#8217;s time for 
me to use one,&amp;nbsp;perhaps.
&lt;/p&gt;

&lt;div class=&#39;title&#39;&gt;&lt;h2&gt;parfor&lt;/h2&gt;&lt;/div&gt;

&lt;p&gt;

The Matlab paralell &lt;span class=&#34;caps&#34;&gt;FOR&lt;/span&gt;-loop is perhaps its most common and easy-to-use paralell feature.
To write a &lt;span class=&#39;code&#39;&gt;parfor&lt;/span&gt; loop, simply rewrite a &lt;span class=&#39;code&#39;&gt;for&lt;/span&gt;
loop which has a loop variable that is a *integral and consecutive row vector*. More hint
can be found in Matlab&amp;#8217;s help documents &lt;a href=&#34;#ref2&#34;&gt;[2]&lt;/a&gt; and &lt;a href=&#34;#ref3&#34;&gt;[3]&lt;/a&gt;.

&lt;/p&gt;

&lt;p&gt;
One hint that I think important is: always keep your I/O variables &lt;span class=&#34;caps&#34;&gt;SLICED&lt;/span&gt; where possible,
or the communication overhead may be efficiency&amp;nbsp;killer.
&lt;/p&gt;

&lt;div class=&#39;title&#39;&gt;&lt;h2&gt;References&lt;/h2&gt;&lt;/div&gt;

&lt;ul class=&#39;news&#39;&gt;
&lt;li&gt;[1] &lt;a href=&#39;http://www.mathworks.cn/help/toolbox/distcomp/matlabpool.html&#39;  
target=&#39;_blank&#39; name=&#39;ref1&#39;&gt;http://www.mathworks.cn/help/toolbox/distcomp/matlabpool.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[2] &lt;a href=&#39;http://www.mathworks.cn/help/toolbox/distcomp/parfor.html&#39;  
target=&#39;_blank&#39; name=&#39;ref2&#39;&gt;http://www.mathworks.cn/help/toolbox/distcomp/parfor.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[3] &lt;a href=&#39;http://www.mathworks.cn/help/toolbox/distcomp/brdqtjj-1.html&#39;  
target=&#39;_blank&#39; name=&#39;ref3&#39;&gt;http://www.mathworks.cn/help/toolbox/distcomp/brdqtjj-1.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;            </content>
        </entry>
            <entry>
            <title type="html">Shortcut batch files that works with Putty</title>
            <author><name>Peng Qi</name></author>
            <link href="/blog/putty-bat.html"/>
            <updated>2012-08-28T10:05:00Z</updated>
            <published>2012-08-28T10:05:00Z</published>
            <id>/blog/putty-bat.html</id>
                        <category   scheme="/blog/tags"
                        term="putty"
                        label="Putty" />
                        <category   scheme="/blog/tags"
                        term="remote"
                        label="Remote" />
            
            <content type="html">
                                &lt;p&gt;
&lt;a href=&#34;http://portableapps.com/apps/internet/putty_portable&#34; target=&#34;_blank&#34;&gt;Putty&lt;/a&gt;
 is one of the most common software with which people work on remote
machines, which typically has a &lt;span class=&#34;caps&#34;&gt;UNIX&lt;/span&gt;/Linux system for stability or efficiency&amp;nbsp;reasons.&lt;/p&gt;

&lt;p&gt;
To operate on the remote machine, I think the reader should be familiar with the
pageant program. Type in your remote host &lt;span class=&#34;caps&#34;&gt;IP&lt;/span&gt; (e.g. &amp;#8220;192.168.x.x&amp;#8221;) 
or host name (e.g. &amp;#8220;super-computer-1&amp;#8221;) at the proper blank, and clicking
the &amp;#8220;Open&amp;#8221; button will get you there. Next just enter your user-name and password
on that computer and you&amp;#8217;ll get a bash interface to work&amp;nbsp;on.
&lt;/p&gt;

&lt;p&gt;
But transferring files between the remote computer and your local &lt;span class=&#34;caps&#34;&gt;PC&lt;/span&gt; is a bit 
complicated. You&amp;#8217;ll need to use the command-line program &lt;span class=&#39;code&#39;&gt;pscp&lt;/span&gt;
to communicate with the remote computer, which probably is short for &amp;#8220;Putty Secure Copy&amp;#8221;.
This post is mainly about using this&amp;nbsp;program.
&lt;/p&gt;

&lt;p&gt;
I have two batch files in my putty directory, called &amp;#8220;get.bat&amp;#8221; and &amp;#8220;send.bat&amp;#8221;, respectively.
They look something&amp;nbsp;like:
&lt;/p&gt;

&lt;p&gt;
get.bat
&lt;/p&gt;

&lt;pre class=&#39;codebox&#39;&gt;
pscp -v USERNAME@REMOTE_SERVER:/home/USERNAME/%1 LOCAL_FOLDER\%2 &amp;lt; PASSWORD
&lt;/pre&gt;

&lt;p&gt;
send.bat
&lt;/p&gt;

&lt;pre class=&#39;codebox&#39;&gt;
pscp -v LOCAL_FOLDER\%1 USERNAME@REMOTE_SERVER:/home/USERNAME/%2 &amp;lt; PASSWORD
&lt;/pre&gt;

&lt;p&gt;
These are nothing difficult to understand. LOCAL_FOLDER is the local folder you
often work with (my personal habit is to put all my programs in sub-directories
of such a folder). &lt;span class=&#34;caps&#34;&gt;USERNAME&lt;/span&gt; is your user-name on the remote computer REMOTE_SERVER.
As with pageant, REMOTE_SERVER can both be remote &lt;span class=&#34;caps&#34;&gt;IP&lt;/span&gt; or remote machine name.
&lt;span class=&#34;caps&#34;&gt;PASSWORD&lt;/span&gt;, acturally, is a file containing the first line your remote server password
and the second line nothing (in fact what matters is the return at the end of the 
first line). using &lt;span class=&#39;code&#39;&gt;&amp;lt; &lt;span class=&#34;caps&#34;&gt;PASSWORD&lt;/span&gt;&lt;/span&gt; allows you to use the file
&lt;span class=&#34;caps&#34;&gt;PASSWORD&lt;/span&gt; as the input to the console whenever your password (followed by a return)
is needed by &lt;span class=&#39;code&#39;&gt;pscp&lt;/span&gt;.
&lt;/p&gt;

&lt;p&gt;
By the way, the switch &lt;span class=&#39;code&#39;&gt;-v&lt;/span&gt; stands for verbose, which allows
pscp to print the detailed progress of connection, file transfer, etc. I prefer it&amp;#8217;s on.
Another switch that may come handy is the &lt;span class=&#39;code&#39;&gt;-r&lt;/span&gt; switch, which
allows pscp to recursively copy all sub-directories and all files in them of the 
given directory, from one computer to&amp;nbsp;another.
&lt;/p&gt;

&lt;p&gt;
Now with these preparations done, all you need to do is &lt;span class=&#39;code&#39;&gt;cd&lt;/span&gt; 
to your Putty directory, and&amp;nbsp;type
&lt;/p&gt;

&lt;pre class=&#39;codebox&#39;&gt;
send my_local_program/* my_remote_folder
rem Remark: Do something (like run your program) on your remote computer here
get my_remote_folder/result/* my_local_program/result/
rem Remark: Make sure the folders exist on both side, or pscp might fail
&lt;/pre&gt;

&lt;p&gt;
Enjoy!
&lt;/p&gt;            </content>
        </entry>
            <entry>
            <title type="html">[Coursera] Machine Learning Notes - Week 1-3</title>
            <author><name>Peng Qi</name></author>
            <link href="/blog/coursera-ml-note-1.html"/>
            <updated>2012-09-01T20:05:00Z</updated>
            <published>2012-09-01T20:05:00Z</published>
            <id>/blog/coursera-ml-note-1.html</id>
                        <category   scheme="/blog/tags"
                        term="coursera"
                        label="Coursera" />
                        <category   scheme="/blog/tags"
                        term="machine_learning"
                        label="Machine_Learning" />
                        <category   scheme="/blog/tags"
                        term="note"
                        label="Note" />
            
            <content type="html">
                                &lt;p&gt;
I recently enrolled in Stanford University&amp;#8217;s Machine Learning open course on
&lt;a href=&#34;http://coursera.org/&#34; target=&#34;_blank&#34;&gt;coursera.org&lt;/a&gt;, which is taught
by esteemed &lt;a href=&#34;http://ai.stanford.edu/~ang/&#34; target=&#34;_blank&#34;&gt;Prof Andrew Ng&lt;/a&gt;.
I&amp;#8217;ll take some notes that are important to me (and probably many machine learning
rookies), and hope this would help in later studies. (Disclosure of homework, 
homework solutions, and other materials are somehow a bad thing to do, 
for copyright problems or unfairness of prospective students of that course,
but I guess notes would be&amp;nbsp;fine.)&lt;/p&gt;

&lt;p&gt;
By the way, the &lt;span class=&#34;caps&#34;&gt;UI&lt;/span&gt; of coursera.org is quite simple and informative, but I guess
somehow they should try to unify the appearance of homepage and inside-course pages,
and use more reliable, preferably official,&amp;nbsp;subtitles.
&lt;/p&gt;

&lt;p&gt;
So here are the notes from Week&amp;nbsp;1-3.
&lt;/p&gt;

&lt;p&gt;
&lt;div class=&#39;title&#39;&gt;&lt;h2&gt;Week 1: Introduction and Linear&amp;nbsp;Regression&lt;/h2&gt;&lt;/div&gt;
&lt;ul class=&#39;news&#39;&gt;
&lt;li&gt;&lt;span class=&#39;lighter&#39;&gt;Machine learning&lt;/span&gt; is some method or algorithm, that improves given experience
&lt;img alt=&#34;E&#34; src=&#34;http://www.texify.com/img/%5Cnormalsize%5C%21E.gif&#34; align=center border=0&gt; 
with regard to some performance measure
&lt;img alt=&#34;P&#34; src=&#34;http://www.texify.com/img/%5Cnormalsize%5C%21P.gif&#34; align=center border=0&gt; 
on a task &lt;img alt=&#34;T&#34; src=&#34;http://www.texify.com/img/%5Cnormalsize%5C%21T.gif&#34; align=center border=0&gt;.
(Paraphrased from Tom Mitchell, 1998. I cannot agree&amp;nbsp;more!)&lt;/li&gt;
&lt;li&gt;&lt;span class=&#39;lighter&#39;&gt;Supervised learning&lt;/span&gt; is learning problems where we are given the &amp;#8220;right answers&amp;#8221;,
and asked to give the &amp;#8220;map&amp;#8221; from input values to prediction. Supervised learning
mainly consist of regression problems (where the output is continuous) and classification
problems (where the output takes only a few discrete&amp;nbsp;values).&lt;/li&gt;
&lt;li&gt;&lt;span class=&#39;lighter&#39;&gt;Unsupervised learning&lt;/span&gt;, on the other hand, has no predefined output value for each input
datum. In such tasks, we usually need to tell the structure of the input data (which is called
&amp;#8220;clustering problem&amp;#8221;), or separate meaningful information from somewhat mixed input (e.g.
the cocktail party problem, where sound recorded by two speakers are used to recover
the sole music and human voice from the scene where they were&amp;nbsp;recorded).&lt;/li&gt;
&lt;li&gt;Usually, in supervised learning, our knowledge of the map from input to output
is given as a parametric &lt;span class=&#39;lighter&#39;&gt;hypothesis&lt;/span&gt;, with a &lt;span class=&#39;lighter&#39;&gt;
cost function&lt;/span&gt; evaluating how good the hypothesis is (given certain choice of&amp;nbsp;parameters).&lt;/li&gt;
&lt;li&gt;&lt;span class=&#39;lighter&#39;&gt;Gradient descent&lt;/span&gt; updates the parameters with update rule 
&lt;img alt=&#34;-\alpha {\partial J(\theta)\over \partial \theta}&#34; src=&#34;http://www.texify.com/img/%5Cnormalsize%5C%21-%5Calpha%20%7B%5Cpartial%20J%28%5Ctheta%29%5Cover%20%5Cpartial%20%5Ctheta%7D.gif&#34; align=center border=0&gt;, with &lt;img alt=&#34;J&#34; src=&#34;http://www.texify.com/img/%5Cnormalsize%5C%21J.gif&#34; align=center border=0&gt; being the cost function, &lt;img alt=&#34;\theta&#34; src=&#34;http://www.texify.com/img/%5Cnormalsize%5C%21%5Ctheta.gif&#34; align=center border=0&gt; the parameter(s), and &lt;img alt=&#34;\alpha&#34; src=&#34;http://www.texify.com/img/%5Cnormalsize%5C%21%5Calpha.gif&#34; align=center border=0&gt; the &lt;span class=&#39;lighter&#39;&gt;learning rate&lt;/span&gt;. Gradient descent can find local minima (maxima) for all functions, but global optima is guaranteed for convex&amp;nbsp;functions.&lt;/li&gt;
&lt;/ul&gt;
&lt;/p&gt;

&lt;p&gt;
I skipped the review of linear algebra there. For that part, the
best help you can find would be a textbook on linear&amp;nbsp;algebra.
&lt;/p&gt;

&lt;p&gt;
&lt;div class=&#39;title&#39;&gt;&lt;h2&gt;Week 2: Multivariate Linear&amp;nbsp;Regression&lt;/h2&gt;&lt;/div&gt;
&lt;ul class=&#39;news&#39;&gt;
&lt;li&gt;Most &lt;span class=&#39;lighter&#39;&gt;multivariate gradient descent&lt;/span&gt; problems involve
multivariate calculus, so to put this into practice, a textbook is still the best
suggestion I can&amp;nbsp;offer.&lt;/li&gt;
&lt;li&gt;Linear regression model can do much more than linear regression. &lt;span class=&#39;lighter&#39;&gt;
Polynomial regression&lt;/span&gt;, for example, can be done with linear regression model
by adding additional features that are powers of certain original features.
&lt;span class=&#39;lighter&#39;&gt;Nonlinear regression&lt;/span&gt; like square roots works well,&amp;nbsp;too.&lt;/li&gt;
&lt;li&gt;&lt;span class=&#39;lighter&#39;&gt;Normal equation&lt;/span&gt; offers the possibility of solving linear
regression analytically. This solution is essentially obtained by setting the derivative 
linear regression&amp;#8217;s cost function to zero (since the cost function is strictly convex,
such solution is guaranteed global optimal). However, since matrix inverse (pseudo inverse 
for non-invertible / singular matrices) operation is costly, this method cannot scale
well to high dimensional&amp;nbsp;problems.&lt;/li&gt;
&lt;li&gt;When your gradient descent doesn&amp;#8217;t work well, try shrinking your &lt;span class=&#39;lighter&#39;&gt;learning rate&lt;/span&gt;. When it converges too slowly, try amplifying your learning rate. A good way to do that is using a factor of about 3x instead of 10x, that is, use &amp;#8220;0.001 0.003 0.01 0.03 0.1 0.3 1&amp;#8221; instead of &amp;#8220;0.001 0.01 0.1 1&amp;#8221;. I recently benefited from this softer approach in my research&amp;nbsp;myself.&lt;/li&gt;
&lt;li&gt;Gradient descent methods can benefit from &lt;span class=&#39;lighter&#39;&gt;feature scaling&lt;/span&gt; (stretch all features to approximately [-1, 1]), 
and &lt;span class=&#39;lighter&#39;&gt;mean normalization&lt;/span&gt; (subtracting mean from the feature values). These techniques make
gradient descent converge faster, without affecting the solution&amp;nbsp;obtained.
&lt;/li&gt;
&lt;/ul&gt;
&lt;/p&gt;

&lt;p&gt;
I also skipped the Octave part as I use Matlab, which is almost the same&amp;nbsp;language.
&lt;/p&gt;

&lt;p&gt;
&lt;div class=&#39;title&#39;&gt;&lt;h2&gt;Week 3: Logistic Regression and&amp;nbsp;Regularization&lt;/h2&gt;&lt;/div&gt;
&lt;ul class=&#39;news&#39;&gt;
&lt;li&gt;&lt;span class=&#39;lighter&#39;&gt;Logistic regression&lt;/span&gt; uses the logistic function (also
called sigmoid function) &lt;img alt=&#34;\sigma(\theta^Tx) = {1\over 1+e^{-\theta^T x}}&#34; src=&#34;http://www.texify.com/img/%5Cnormalsize%5C%21%5Csigma%28%5Ctheta%5ETx%29%20%3D%20%7B1%5Cover%201%2Be%5E%7B-%5Ctheta%5ET%20x%7D%7D.gif&#34; align=center border=0&gt; as the hypothesis function. To avoid non-convexity of cost function,
instead of the squared difference function linear regression used, logistic regression
used a cross-entropy style cost function &lt;img alt=&#34;f(x) = -y\log(\sigma(\theta^Tx)) - (1-y)\log(1-\sigma(\theta^Tx))&#34; src=&#34;http://www.texify.com/img/%5Cnormalsize%5C%21f%28x%29%20%3D%20-y%5Clog%28%5Csigma%28%5Ctheta%5ETx%29%29%20-%20%281-y%29%5Clog%281-%5Csigma%28%5Ctheta%5ETx%29%29.gif&#34; align=center border=0&gt;. This cost function
is convex, and thus friendly to gradient descent, for gradient descent methods are
guaranteed to obtain the global&amp;nbsp;optima.&lt;/li&gt;
&lt;li&gt;To generalize binary logistic regression to multiple class, the common 
option is the &lt;span class=&#39;lighter&#39;&gt;&amp;#8220;one-vs-all&amp;#8221; algorithm&lt;/span&gt;. For each class,
treat it as the positive class and all others as the negative class, we can train
a binary logistic classifier. All these classifiers together consists of a 
multi-class logistic regression&amp;nbsp;classifier.&lt;/li&gt;
&lt;li&gt;&lt;span class=&#39;lighter&#39;&gt;Regularization&lt;/span&gt; can be used to avoid &lt;span class=&#39;lighter&#39;&gt;
over-fitting&lt;/span&gt;, where the parameters fits the hypothesis too well to the training
set that it cannot generalize well to new inputs. Regularization does this by
minimizing the impact of unnecessary features on the cost function with regard to
the regularization constant. However, when this constant is set too large,
necessary features could get suppressed, too, causing the model to &lt;span class=&#39;lighter&#39;&gt;
under-fit&lt;/span&gt; the data, in other words, introducing high bias towards
how the data should be&amp;nbsp;interpreted.&lt;/li&gt;
&lt;/ul&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;div class=&#39;title&#39;&gt;&lt;h2&gt;See&amp;nbsp;Also&amp;#8230;&lt;/h2&gt;&lt;/div&gt;
&lt;a href=&#34;coursera-ml-note-2.html&#34;&gt;[Coursera] Machine Learning Notes - Week 4-6&lt;/a&gt;&lt;br&gt;
&lt;a href=&#34;coursera-ml-note-3.html&#34;&gt;[Coursera] Machine Learning Notes - Week&amp;nbsp;7-10&lt;/a&gt;
&lt;/p&gt;            </content>
        </entry>
            <entry>
            <title type="html">[Coursera] Machine Learning Notes - Week 4-6</title>
            <author><name>Peng Qi</name></author>
            <link href="/blog/coursera-ml-note-2.html"/>
            <updated>2012-09-24T14:00:00Z</updated>
            <published>2012-09-24T14:00:00Z</published>
            <id>/blog/coursera-ml-note-2.html</id>
                        <category   scheme="/blog/tags"
                        term="coursera"
                        label="Coursera" />
                        <category   scheme="/blog/tags"
                        term="machine_learning"
                        label="Machine_Learning" />
                        <category   scheme="/blog/tags"
                        term="note"
                        label="Note" />
            
            <content type="html">
                                &lt;p&gt;
This post are the fresh notes of the current offering of Machine Learning course
on &lt;a href=&#34;https://coursera.org&#34; target=&#34;_blank&#34;&gt;coursera.org&lt;/a&gt;, which covers the
courses offered in Week 4 (Neural Networks: Representation) 
through Week 6 (Machine Learning System&amp;nbsp;Design).&lt;/p&gt;

&lt;p&gt;
&lt;div class=&#39;title&#39;&gt;&lt;h2&gt;Week 4: Neural Networks&amp;nbsp;Representation&lt;/h2&gt;&lt;/div&gt;
&lt;ul class=&#39;news&#39;&gt;
&lt;li&gt;&lt;span class=&#39;lighter&#39;&gt;Neural networks&lt;/span&gt; are multi-layer models in which each layer can be envisioned as, I think, a &lt;span class=&#39;lighter&#39;&gt;multivariate logistic regression&lt;/span&gt; model. The &lt;span class=&#39;lighter&#39;&gt;raw activation&lt;/span&gt; is the input of the previous layer (including a bias unit) times the &lt;span class=&#39;lighter&#39;&gt;network parameters&lt;/span&gt; (or &amp;#8220;weights&amp;#8221;) inbetween; and the final output, the &lt;span class=&#39;lighter&#39;&gt;activation&lt;/span&gt; is the result of taking element-wise sigmoid nonlinearity of the raw&amp;nbsp;activations.&lt;/li&gt;
&lt;li&gt;Neural networks borrow its inspiration from the neuron cells, where input weights mimic the &lt;span class=&#39;lighter&#39;&gt;dendrites&lt;/span&gt;, while the output weights mimic the &lt;span class=&#39;lighter&#39;&gt;Axons&lt;/span&gt;. &lt;span class=&#39;lighter&#39;&gt;Neuron cell bodies&lt;/span&gt; are usually thought as computing a nonlinear function from the inputs to the&amp;nbsp;outputs.&lt;/li&gt;
&lt;li&gt;Neural networks can fit extremely complex functions, and by extracting more complex features of the input at each layer, the classfication result is often improved. Neural network classfication uses a notation of the &amp;#8220;one-vs-all&amp;#8221; scheme. That is, when we have multiple (&amp;gt;= 3) labels, each label is denoted as an &amp;#8220;all-zero-by-a-one&amp;#8221; vector, e.g. class 1 = [1 0 0], class 2 = [0 1 0], class 3 = [0 0&amp;nbsp;1].&lt;/li&gt;
&lt;/ul&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;div class=&#39;title&#39;&gt;&lt;h2&gt;Week 5: Neural Networks&amp;nbsp;Learning&lt;/h2&gt;&lt;/div&gt;
&lt;ul class=&#39;news&#39;&gt;
&lt;li&gt;The &lt;span class=&#39;lighter&#39;&gt;cost function&lt;/span&gt; of neural networks have similar forms to that of linear regression and logistic regression: an &amp;#8220;output error&amp;#8221; term plus the regularization term. Similar to logistic regression, the &amp;#8220;1&amp;#8221; unit or bias unit is not taken into consideration when doing parameter&amp;nbsp;regularization.&lt;/li&gt;
&lt;li&gt;The &lt;span class=&#39;lighter&#39;&gt;back-propagation algorithm&lt;/span&gt; propagate the error from the output layer all the way back to the first hidden layer (the layer next to the input layer), and use the error as well as the sigmoid gradient of the lower layer to compute the gradient of the weights inbetween. Similar to &lt;span class=&#39;lighter&#39;&gt;forward propagation&lt;/span&gt; that computes the activation of each layer and finally the output of the network, backprop is done layer-by-layer &amp;#8211; only in the reverse&amp;nbsp;order. &lt;/li&gt;
&lt;li&gt;To make use of Matlab/Octave built-in or third-party vector-based optimization functions to obtain network parameters, the parameters, as well as their corresponding gradients, should be unrolled to form a single vector in pratical&amp;nbsp;implementation.&lt;/li&gt;
&lt;li&gt;To ensure that the gradient of the network parameters are correctly implemented, &lt;span class=&#39;lighter&#39;&gt;gradient checking&lt;/span&gt; should be performed to check if the gradients computed from analytical formulas are in accordance with those computed from approximation. Approximation can be done by choosing a small inteval length epsilon, and compute the two-sided approximate gradient (function value difference divided by the total interval length). As this gradient approximation is often computationally inefficient, gradient checking codes should be turned off before applying to pratical&amp;nbsp;training.&lt;/li&gt;
&lt;li&gt;Identical initialization will lead to identical gradients of the weights, thus the parameters will always remain identical between a given input unit and all the identically-initialized output units, resulting in uninformative (redundant) units. Thus, &lt;span class=&#39;lighter&#39;&gt;random initialization&lt;/span&gt; is essential to neural&amp;nbsp;networks.&lt;/li&gt;
&lt;/ul&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;div class=&#39;title&#39;&gt;&lt;h2&gt;Week 6: Advice for Applying Machine Learning and Machine Learning Systems&amp;nbsp;Design&lt;/h2&gt;&lt;/div&gt;
&lt;ul class=&#39;news&#39;&gt;
&lt;li&gt;When evaluating a hypothesis, the best benchmark should be the error (or value of unregularized cost function) on the &lt;span class=&#39;lighter&#39;&gt;test set&lt;/span&gt;. But when multiple models are to be seleted from, a third &lt;span class=&#39;lighter&#39;&gt;cross-validation set&lt;/span&gt; should be used, thus the result from the test set is fair. Thus a usual pipeline of training, selecting a proper learning algorithm / model, and evaluating the model should be: first train the models on the &lt;span class=&#39;lighter&#39;&gt;training set&lt;/span&gt;, then fit the regularization value / choose a model according to the performance on the cross-validation set (or validation set), and finally evaluate the model on the test set. All three sets must be&amp;nbsp;disjoint.&lt;/li&gt;
&lt;li&gt;&lt;span class=&#39;lighter&#39;&gt;Learning curves&lt;/span&gt; are the errors on the training set and validation set, respectively, plotted against the number of training data used. When the training error as well as validation error converge to a close large value, it&amp;#8217;s likely that the model is of high bias (underfit), and adding features, decreasing regularization value should be considerable solutions. When the training error is small while the validation error remains large, it&amp;#8217;s likely that the model is of high variance (overfit), and proper actions to take include carefully selecting features, reducing model parameters, and increasing regularization punishment. A proper learning curve should have a decreasing validation error and an increasing training error, and the former converging at a value usually slightly higher than that of the&amp;nbsp;latter.&lt;/li&gt;
&lt;li&gt;&lt;span class=&#39;lighter&#39;&gt;Error analysis&lt;/span&gt; is an approach in which we analyse the characteristics of the falsely classfied data, and determine whether devising new features to deal with the misjudgements. It is also recommended to implement a &amp;#8220;quick and dirty&amp;#8221; learning algorithm for error analysis, to determine whether an algorithm is a good starting&amp;nbsp;point.&lt;/li&gt;
&lt;li&gt;When the data classes are skewed, e.g. have 99% positive examples with only 1% negative examples, &lt;span class=&#39;lighter&#39;&gt;Precision&lt;/span&gt; = #true positive / #predicted positive = #true positive / (#true positive + #false positive), &lt;span class=&#39;lighter&#39;&gt;Recall&lt;/span&gt; = #true positive / #all positive = #true positive / (#true positive + #false negative), and &lt;span class=&#39;lighter&#39;&gt;F1 Score&lt;/span&gt; = 2 * Precision * Recall / (Precision + Recall) are often superior error metrics than &lt;span class=&#39;lighter&#39;&gt;Accuracy&lt;/span&gt; = (#true postive + #true negative) / #all&amp;nbsp;data.&lt;/li&gt;
&lt;li&gt;&lt;span class=&#39;lighter&#39;&gt;Large amount of data&lt;/span&gt; is helpful when (i) our model is of high variance (overfitting), as more data can make it difficult for the model to overfit the data, *&lt;span class=&#34;caps&#34;&gt;AND&lt;/span&gt;* (ii) the features are enough for a human expert to give good predictions, i.e. giving enough information about the desired output, or more data will not&amp;nbsp;help.&lt;/li&gt;
&lt;/ul&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;div class=&#39;title&#39;&gt;&lt;h2&gt;See&amp;nbsp;Also&amp;#8230;&lt;/h2&gt;&lt;/div&gt;
&lt;a href=&#34;coursera-ml-note-1.html&#34;&gt;[Coursera] Machine Learning Notes - Week 1-3&lt;/a&gt;&lt;br&gt;
&lt;a href=&#34;coursera-ml-note-3.html&#34;&gt;[Coursera] Machine Learning Notes - Week&amp;nbsp;7-10&lt;/a&gt;
&lt;/p&gt;            </content>
        </entry>
            <entry>
            <title type="html">[Coursera] Machine Learning Notes - Week 7-10</title>
            <author><name>Peng Qi</name></author>
            <link href="/blog/coursera-ml-note-3.html"/>
            <updated>2012-10-21T20:05:00Z</updated>
            <published>2012-10-21T20:05:00Z</published>
            <id>/blog/coursera-ml-note-3.html</id>
                        <category   scheme="/blog/tags"
                        term="coursera"
                        label="Coursera" />
                        <category   scheme="/blog/tags"
                        term="machine_learning"
                        label="Machine_Learning" />
                        <category   scheme="/blog/tags"
                        term="note"
                        label="Note" />
            
            <content type="html">
                                &lt;p&gt;
This post are the fresh notes of the current offering of Machine Learning course
on &lt;a href=&#34;https://coursera.org&#34; target=&#34;_blank&#34;&gt;coursera.org&lt;/a&gt;, which covers the
courses offered in Week 7 (Support Vector Machines) 
through Week 10 (Large-scale Machine&amp;nbsp;Learning).&lt;/p&gt;

&lt;p&gt;
So here are the notes from Week&amp;nbsp;7-10.
&lt;/p&gt;

&lt;p&gt;
&lt;div class=&#39;title&#39;&gt;&lt;h2&gt;Week 7: Support Vector&amp;nbsp;Machines&lt;/h2&gt;&lt;/div&gt;
&lt;ul class=&#39;news&#39;&gt;
&lt;li&gt;The basic &lt;span class=&#34;lighter&#34;&gt;linear &lt;span class=&#34;caps&#34;&gt;SVM&lt;/span&gt;&lt;/span&gt; is obtained by replacing the log difference in the cost function with a rectified linear function (but with an offset of 1 on both&amp;nbsp;sides).&lt;/li&gt;
&lt;li&gt;The offset in the cost function can count for the property of &lt;span class=&#34;lighter&#34;&gt;large margine&lt;/span&gt;, which helps the classifier to generalize better by choosing a decision boundary of large margin from positive and negative examples. Such behavior can be tuned by the C factor in the cost function, leveraging between high bias and high&amp;nbsp;variance.&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;lighter&#34;&gt;Kernels&lt;/span&gt; can extend the application of support vector machines. Kernels are usually similarity measures between the input data vectors and chosen &lt;span class=&#34;lighter&#34;&gt;landmark vectors&lt;/span&gt;. If the similarity function is, for example, Gaussian centered at the landmarks, the resulting &lt;span class=&#34;caps&#34;&gt;SVM&lt;/span&gt; is called a Gaussian&amp;nbsp;&lt;span class=&#34;caps&#34;&gt;SVM&lt;/span&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;div class=&#39;title&#39;&gt;&lt;h2&gt;Week 8: Clustering and Dimensionality&amp;nbsp;Reduction&lt;/h2&gt;&lt;/div&gt;
&lt;ul class=&#39;news&#39;&gt;
&lt;li&gt;&lt;span class=&#34;lighter&#34;&gt;Clustering&lt;/span&gt; and obtaining a good inner representation are two important forms of unsupervised&amp;nbsp;learning.&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;lighter&#34;&gt;K-means&lt;/span&gt; is a clustering algorithm that takes an iterative approach between &amp;#8220;center assignment&amp;#8221; steps and &amp;#8220;center re-location&amp;#8221; steps. During a center assignmnet step, each data point is assigned to the nearest of the K centroids; and during a center re-location step, each of the K centroids is re-located at the arithmetic mean of the data points that&amp;#8217;s assigned to the&amp;nbsp;centroid.&lt;/li&gt;
&lt;li&gt;K-means centroids should usually be &lt;span class=&#34;lighter&#34;&gt;randomly initialized&lt;/span&gt; as random chosen data points. And one should expect to run K-means for several times to obtain stable results, with independent (different) random&amp;nbsp;initializations.&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;lighter&#34;&gt;The choice of the number of clusters&lt;/span&gt; should preferrably be determined by downstream purpose of the clustering, e.g. the profit of T-shirts given different number of sizes. Otherwise, one could plot the total clustering cost (sum of squared distances from data points to clustering centroids), and choose the value where the derivative of the error diminishes significantly (this is called the &lt;span class=&#34;lighter&#34;&gt;&amp;#8220;Elbow method&amp;#8221;&lt;/span&gt;).&lt;/li&gt;
&lt;li&gt;Two apparent motivations for &lt;span class=&#34;lighter&#34;&gt;dimensionality reduction&lt;/span&gt; are data compression (for storage or computation speed-up purposes) and data visualization (for higher-dimensional&amp;nbsp;data). &lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;lighter&#34;&gt;Principle Component Analysis (&lt;span class=&#34;caps&#34;&gt;PCA&lt;/span&gt;)&lt;/span&gt; is one of the most commonly used algorithm for dimensionality reduction. It computes the eigen-decomposition of the covariance matrix of the data, and then takes only the eigenvectors corresponding to the largest K eigenvalues to represent the data (by projecting the data points on to the subspace spanned by such&amp;nbsp;vectors).&lt;/li&gt;
&lt;li&gt;The number of principle components to keep should usually retain 90 or higher percent (preferably 99%) of the variance of the data, meaning the sum of squared difference between the reconstructed data divided by the sum of squared data&amp;nbsp;(dimension-wise).&lt;/li&gt;
&lt;/ul&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;div class=&#39;title&#39;&gt;&lt;h2&gt;Week 9: Anomaly Detection and Recommender&amp;nbsp;Systems&lt;/h2&gt;&lt;/div&gt;
&lt;ul class=&#39;news&#39;&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;div class=&#39;title&#39;&gt;&lt;h2&gt;Week 10: Large Scale Machine&amp;nbsp;Learning&lt;/h2&gt;&lt;/div&gt;
&lt;ul class=&#39;news&#39;&gt;
&lt;/ul&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;div class=&#39;title&#39;&gt;&lt;h2&gt;See&amp;nbsp;Also&amp;#8230;&lt;/h2&gt;&lt;/div&gt;
&lt;a href=&#34;coursera-ml-note-1.html&#34;&gt;[Coursera] Machine Learning Notes - Week 1-3&lt;/a&gt;&lt;br&gt;
&lt;a href=&#34;coursera-ml-note-2.html&#34;&gt;[Coursera] Machine Learning Notes - Week&amp;nbsp;4-6&lt;/a&gt;
&lt;/p&gt;            </content>
        </entry>
    </feed>